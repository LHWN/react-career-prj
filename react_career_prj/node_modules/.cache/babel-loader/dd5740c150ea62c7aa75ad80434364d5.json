{"ast":null,"code":"'use strict';\n/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\n\nvar parse = require('../parse');\n\nvar html = require('../static').html;\n\nvar text = require('../static').text;\n\nvar updateDOM = parse.update;\n\nvar utils = require('../utils');\n\nvar domEach = utils.domEach;\nvar cloneDom = utils.cloneDom;\nvar isHtml = utils.isHtml;\nvar slice = Array.prototype.slice;\n\nvar domhandler = require('domhandler');\n\nvar DomUtils = require('htmlparser2').DomUtils;\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @param {Cheerio | string | Cheerio[] | string[]} [elem] - Elements to make an array of.\n * @param {boolean} [clone] - Optionally clone nodes.\n * @returns {Node[]} The array of nodes.\n */\n\n\nexports._makeDomArray = function makeDomArray(elem, clone) {\n  if (elem == null) {\n    return [];\n  }\n\n  if (elem.cheerio) {\n    return clone ? cloneDom(elem.get()) : elem.get();\n  }\n\n  if (Array.isArray(elem)) {\n    return elem.reduce(function (newElems, el) {\n      return newElems.concat(this._makeDomArray(el, clone));\n    }.bind(this), []);\n  }\n\n  if (typeof elem === 'string') {\n    return parse(elem, this.options, false).children;\n  }\n\n  return clone ? cloneDom([elem]) : [elem];\n};\n\nfunction _insert(concatenator) {\n  return function () {\n    var elems = slice.call(arguments);\n    var lastIdx = this.length - 1;\n    return domEach(this, function (i, el) {\n      var domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, html(el.children)) : elems;\n\n      var dom = this._makeDomArray(domSrc, i < lastIdx);\n\n      concatenator(dom, el.children, el);\n    });\n  };\n}\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @param {Node[]} array - Target array to splice.\n * @param {number} spliceIdx - Index at which to begin changing the array.\n * @param {number} spliceCount - Number of elements to remove from the array.\n * @param {Node[]} newElems - Elements to insert into the array.\n * @param {NodeWithChildren} parent - The parent of the node.\n * @returns {Node[]} The spliced array.\n */\n\n\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n  var spliceArgs = [spliceIdx, spliceCount].concat(newElems);\n  var prev = array[spliceIdx - 1] || null;\n  var next = array[spliceIdx + spliceCount] || null; // Before splicing in new elements, ensure they do not already appear in the\n  // current array.\n\n  for (var idx = 0; idx < newElems.length; ++idx) {\n    var node = newElems[idx];\n    var oldParent = node.parent;\n    var prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);\n\n    if (oldParent && prevIdx > -1) {\n      oldParent.children.splice(prevIdx, 1);\n\n      if (parent === oldParent && spliceIdx > prevIdx) {\n        spliceArgs[0]--;\n      }\n    }\n\n    node.parent = parent;\n\n    if (node.prev) {\n      node.prev.next = node.next || null;\n    }\n\n    if (node.next) {\n      node.next.prev = node.prev || null;\n    }\n\n    node.prev = newElems[idx - 1] || prev;\n    node.next = newElems[idx + 1] || next;\n  }\n\n  if (prev) {\n    prev.next = newElems[0];\n  }\n\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n\n  return array.splice.apply(array, spliceArgs);\n}\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @example\n *   $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //      <li class=\"plum\">Plum</li>\n *   //    </ul>\n *\n * @param {string | Cheerio} target - Element to append elements to.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\n\n\nexports.appendTo = function (target) {\n  if (!target.cheerio) {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n\n  target.append(this);\n  return this;\n};\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @example\n *   $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @param {string | Cheerio} target - Element to prepend elements to.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\n\n\nexports.prependTo = function (target) {\n  if (!target.cheerio) {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n\n  target.prepend(this);\n  return this;\n};\n/**\n * Inserts content as the *last* child of each of the selected elements.\n *\n * @example\n *   $('ul').append('<li class=\"plum\">Plum</li>');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //      <li class=\"plum\">Plum</li>\n *   //    </ul>\n *\n * @function\n * @see {@link https://api.jquery.com/append/}\n */\n\n\nexports.append = _insert(function (dom, children, parent) {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the *first* child of each of the selected elements.\n *\n * @example\n *   $('ul').prepend('<li class=\"plum\">Plum</li>');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @function\n * @see {@link https://api.jquery.com/prepend/}\n */\n\nexports.prepend = _insert(function (dom, children, parent) {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\n\nfunction _wrap(insert) {\n  return function (wrapper) {\n    var wrapperFn = typeof wrapper === 'function' && wrapper;\n    var lastIdx = this.length - 1;\n    var lastParent = this.parents().last();\n\n    for (var i = 0; i < this.length; i++) {\n      var el = this[i];\n\n      if (wrapperFn) {\n        wrapper = wrapperFn.call(el, i);\n      }\n\n      if (typeof wrapper === 'string' && !isHtml(wrapper)) {\n        wrapper = lastParent.find(wrapper).clone();\n      }\n\n      var wrapperDom = this._makeDomArray(wrapper, i < lastIdx).slice(0, 1);\n\n      var elInsertLocation = wrapperDom[0]; // Find the deepest child. Only consider the first tag child of each node\n      // (ignore text); stop if no children are found.\n\n      var j = 0;\n\n      while (elInsertLocation && elInsertLocation.children && j < elInsertLocation.children.length) {\n        if (elInsertLocation.children[j].type === 'tag') {\n          elInsertLocation = elInsertLocation.children[j];\n          j = 0;\n        } else {\n          j++;\n        }\n      }\n\n      insert(el, elInsertLocation, wrapperDom);\n    }\n\n    return this;\n  };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @example\n *   const redFruit = $('<div class=\"red-fruit\"></div>');\n *   $('.apple').wrap(redFruit);\n *\n *   //=> <ul id=\"fruits\">\n *   //     <div class=\"red-fruit\">\n *   //      <li class=\"apple\">Apple</li>\n *   //     </div>\n *   //     <li class=\"orange\">Orange</li>\n *   //     <li class=\"plum\">Plum</li>\n *   //   </ul>\n *\n *   const healthy = $('<div class=\"healthy\"></div>');\n *   $('li').wrap(healthy);\n *\n *   //=> <ul id=\"fruits\">\n *   //     <div class=\"healthy\">\n *   //       <li class=\"apple\">Apple</li>\n *   //     </div>\n *   //     <div class=\"healthy\">\n *   //       <li class=\"orange\">Orange</li>\n *   //     </div>\n *   //     <div class=\"healthy\">\n *   //        <li class=\"plum\">Plum</li>\n *   //     </div>\n *   //   </ul>\n *\n * @function\n * @param {Cheerio} wrapper - The DOM structure to wrap around each element in\n *   the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\n\n\nexports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {\n  var parent = el.parent;\n  var siblings = parent.children;\n  var index = siblings.indexOf(el);\n  updateDOM([el], elInsertLocation); // The previous operation removed the current element from the `siblings`\n  // array, so the `dom` array can be inserted without removing any\n  // additional elements.\n\n  uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @example\n *   const redFruit = $('<div class=\"red-fruit\"></div>');\n *   $('.apple').wrapInner(redFruit);\n *\n *   //=> <ul id=\"fruits\">\n *   //     <li class=\"apple\">\n *   //       <div class=\"red-fruit\">Apple</div>\n *   //     </li>\n *   //     <li class=\"orange\">Orange</li>\n *   //     <li class=\"pear\">Pear</li>\n *   //   </ul>\n *\n *   const healthy = $('<div class=\"healthy\"></div>');\n *   $('li').wrapInner(healthy);\n *\n *   //=> <ul id=\"fruits\">\n *   //     <li class=\"apple\">\n *   //       <div class=\"healthy\">Apple</div>\n *   //     </li>\n *   //     <li class=\"orange\">\n *   //       <div class=\"healthy\">Orange</div>\n *   //     </li>\n *   //     <li class=\"pear\">\n *   //       <div class=\"healthy\">Pear</div>\n *   //     </li>\n *   //   </ul>\n *\n * @function\n * @param {Cheerio} wrapper - The DOM structure to wrap around the content of\n *   each element in the selection.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\n\nexports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {\n  updateDOM(el.children, elInsertLocation);\n  updateDOM(wrapperDom, el);\n});\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @example <caption>without selector</caption>\n *   const $ = cheerio.load(\n *     '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n *   );\n *   $('#test p').unwrap();\n *\n *   //=> <div id=test>\n *   //     <p>Hello</p>\n *   //     <p>World</p>\n *   //   </div>\n *\n * @example <caption>with selector</caption>\n *   const $ = cheerio.load(\n *     '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n *   );\n *   $('#test p').unwrap('b');\n *\n *   //=> <div id=test>\n *   //     <p>Hello</p>\n *   //     <p>World</p>\n *   //   </div>\n *\n * @param {string} [selector] - A selector to check the parent element against.\n *   If an element's parent does not match the selector, the element won't be unwrapped.\n * @returns {Cheerio} The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\n\nexports.unwrap = function (selector) {\n  var self = this;\n  this.parent(selector).not('body').each(function (i, el) {\n    self._make(el).replaceWith(el.children);\n  });\n  return this;\n};\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @example <caption>With markup passed to `wrapAll`</caption>\n *   const $ = cheerio.load(\n *     '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n *   );\n *   $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n *   //=> <div class=\"container\">\n *   //     <div class='new'>\n *   //       <div class=\"inner\">First</div>\n *   //       <div class=\"inner\">Second</div>\n *   //     </div>\n *   //   </div>\n *\n * @example <caption>With an existing cheerio instance</caption>\n *   const $ = cheerio.load(\n *     '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n *   );\n *   const wrap = $('<div><p><em><b></b></em></p></div>');\n *   $('span').wrapAll(wrap);\n *\n *   //=> <div>\n *   //     <p>\n *   //       <em>\n *   //         <b>\n *   //           <span>Span 1</span>\n *   //           <span>Span 2</span>\n *   //         </b>\n *   //       </em>\n *   //     </p>\n *   //   </div>\n *   //   <strong>Strong</strong>\n *\n * @param {Cheerio | string | Element | Element[] | Function} wrapper - The DOM\n *   structure to wrap around all matched elements in the selection.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\n\n\nexports.wrapAll = function (wrapper) {\n  if (this[0]) {\n    if (typeof wrapper === 'function') {\n      wrapper = wrapper.call(this[0]);\n    }\n\n    var wrap = this._make(wrapper).insertBefore(this[0]); // if html is given as wrapper, wrap may contain text elements\n\n\n    var elInsertLocation = {\n      children: wrap\n    };\n    var j = 0; // Find the deepest child. Only consider the first tag child of each node\n    // (ignore text); stop if no children are found.\n\n    while (elInsertLocation && elInsertLocation.children && j < elInsertLocation.children.length) {\n      if (elInsertLocation.children[j].type === 'tag') {\n        elInsertLocation = elInsertLocation.children[j];\n        j = 0;\n      } else {\n        j++;\n      }\n    }\n\n    this._make(elInsertLocation).append(this);\n  }\n\n  return this;\n};\n/*eslint-disable jsdoc/check-param-names*/\n\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @example\n *   $('.apple').after('<li class=\"plum\">Plum</li>');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @param {...(string | Element | Element[] | Cheerio | Function)} content -\n *   HTML string, DOM element, array of DOM elements or Cheerio to insert after\n *   each element in the set of matched elements.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\n\n\nexports.after = function () {\n  var elems = slice.call(arguments);\n  var lastIdx = this.length - 1;\n  return domEach(this, function (i, el) {\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return;\n    var domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, html(el.children)) : elems;\n\n    var dom = this._makeDomArray(domSrc, i < lastIdx); // Add element after `this` element\n\n\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n};\n/*eslint-enable jsdoc/check-param-names*/\n\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @example\n *   $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @param {string | Cheerio} target - Element to insert elements after.\n * @returns {Cheerio} The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\n\n\nexports.insertAfter = function (target) {\n  var clones = [];\n  var self = this;\n\n  if (typeof target === 'string') {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return; // Add cloned `this` element(s) after target element\n\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n/*eslint-disable jsdoc/check-param-names*/\n\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @example\n *   $('.apple').before('<li class=\"plum\">Plum</li>');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @param {...(string | Element | Element[] | Cheerio | Function)} content -\n *   HTML string, DOM element, array of DOM elements or Cheerio to insert before\n *   each element in the set of matched elements.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\n\n\nexports.before = function () {\n  var elems = slice.call(arguments);\n  var lastIdx = this.length - 1;\n  return domEach(this, function (i, el) {\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return;\n    var domSrc = typeof elems[0] === 'function' ? elems[0].call(el, i, html(el.children)) : elems;\n\n    var dom = this._makeDomArray(domSrc, i < lastIdx); // Add element before `el` element\n\n\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n};\n/*eslint-enable jsdoc/check-param-names*/\n\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @example\n *   $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @param {string | Cheerio} target - Element to insert elements before.\n * @returns {Cheerio} The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\n\n\nexports.insertBefore = function (target) {\n  var clones = [];\n  var self = this;\n\n  if (typeof target === 'string') {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (_, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el); // If not found, move on\n\n    /* istanbul ignore next */\n\n    if (index < 0) return; // Add cloned `this` element(s) after target element\n\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @example\n *   $('.pear').remove();\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //    </ul>\n *\n * @param {string} [selector] - Optional selector for elements to remove.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\n\n\nexports.remove = function (selector) {\n  // Filter if we have selector\n  var elems = selector ? this.filter(selector) : this;\n  domEach(elems, function (_, el) {\n    DomUtils.removeElement(el);\n    el.prev = el.next = el.parent = null;\n  });\n  return this;\n};\n/**\n * Replaces matched elements with `content`.\n *\n * @example\n *   const plum = $('<li class=\"plum\">Plum</li>');\n *   $('.pear').replaceWith(plum);\n *   $.html();\n *   //=> <ul id=\"fruits\">\n *   //     <li class=\"apple\">Apple</li>\n *   //     <li class=\"orange\">Orange</li>\n *   //     <li class=\"plum\">Plum</li>\n *   //   </ul>\n *\n * @param {Cheerio | Function} content - Replacement for matched elements.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\n\n\nexports.replaceWith = function (content) {\n  return domEach(this, function (i, el) {\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n\n    var dom = this._makeDomArray(typeof content === 'function' ? content.call(el, i, el) : content); // In the case that `dom` contains nodes that already exist in other\n    // structures, ensure those nodes are properly removed.\n\n\n    updateDOM(dom, null);\n    var index = siblings.indexOf(el); // Completely remove old element\n\n    uniqueSplice(siblings, index, 1, dom, parent);\n\n    if (dom.indexOf(el) < 0) {\n      el.parent = el.prev = el.next = null;\n    }\n  });\n};\n/**\n * Empties an element, removing all its children.\n *\n * @example\n *   $('ul').empty();\n *   $.html();\n *   //=>  <ul id=\"fruits\"></ul>\n *\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\n\n\nexports.empty = function () {\n  return domEach(this, function (_, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    el.children.length = 0;\n  });\n};\n/**\n * Gets an HTML content string from the first selected element. If `htmlString`\n * is specified, each selected element's content is replaced by the new content.\n *\n * @example\n *   $('.orange').html();\n *   //=> Orange\n *\n *   $('#fruits').html('<li class=\"mango\">Mango</li>').html();\n *   //=> <li class=\"mango\">Mango</li>\n *\n * @param {string | Cheerio} str - If specified used to replace selection's contents.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/html/}\n */\n\n\nexports.html = function (str) {\n  if (str === undefined) {\n    if (!this[0] || !this[0].children) return null;\n    return html(this[0].children, this.options);\n  }\n\n  var opts = Object.apply({}, this.options); // keep main options\n\n  return domEach(this, function (_, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    opts.context = el;\n    var content = str.cheerio ? str.clone().get() : parse('' + str, opts, false).children;\n    updateDOM(content, el);\n  });\n};\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @returns {string} The rendered document.\n */\n\n\nexports.toString = function () {\n  return html(this, this.options);\n};\n/**\n * Get the combined text contents of each element in the set of matched\n * elements, including their descendants. If `textString` is specified, each\n * selected element's content is replaced by the new text content.\n *\n * @example\n *   $('.orange').text();\n *   //=> Orange\n *\n *   $('ul').text();\n *   //=>  Apple\n *   //    Orange\n *   //    Pear\n *\n * @param {string | Function} [str] - If specified replacement for the selected\n *   element's contents.\n * @returns {Cheerio | string} The instance itself when setting text, otherwise\n *   the rendered document.\n * @see {@link https://api.jquery.com/text/}\n */\n\n\nexports.text = function (str) {\n  // If `str` is undefined, act as a \"getter\"\n  if (str === undefined) {\n    return text(this);\n  }\n\n  if (typeof str === 'function') {\n    // Function support\n    return domEach(this, function (i, el) {\n      return exports.text.call(this._make(el), str.call(el, i, text([el])));\n    });\n  } // Append text node to each selected elements\n\n\n  return domEach(this, function (_, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    var textNode = new domhandler.Text(str);\n    updateDOM(textNode, el);\n  });\n};\n/**\n * Clone the cheerio object.\n *\n * @example\n *   const moreFruit = $('#fruits').clone();\n *\n * @returns {Cheerio} The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\n\n\nexports.clone = function () {\n  return this._make(cloneDom(this.get()));\n};","map":{"version":3,"sources":["/Users/lhwn/Documents/workspace/react_career_prj/node_modules/cheerio/lib/api/manipulation.js"],"names":["parse","require","html","text","updateDOM","update","utils","domEach","cloneDom","isHtml","slice","Array","prototype","domhandler","DomUtils","exports","_makeDomArray","makeDomArray","elem","clone","cheerio","get","isArray","reduce","newElems","el","concat","bind","options","children","_insert","concatenator","elems","call","arguments","lastIdx","length","i","domSrc","dom","uniqueSplice","array","spliceIdx","spliceCount","parent","spliceArgs","prev","next","idx","node","oldParent","prevIdx","indexOf","splice","apply","appendTo","target","constructor","_originalRoot","append","prependTo","prepend","_wrap","insert","wrapper","wrapperFn","lastParent","parents","last","find","wrapperDom","elInsertLocation","j","type","wrap","siblings","index","wrapInner","unwrap","selector","self","not","each","_make","replaceWith","wrapAll","insertBefore","after","insertAfter","clones","remove","clonedSelf","push","before","_","filter","removeElement","content","empty","forEach","child","str","undefined","opts","Object","context","toString","textNode","Text"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqBC,IAAhC;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,WAAD,CAAP,CAAqBE,IAAhC;;AACA,IAAIC,SAAS,GAAGJ,KAAK,CAACK,MAAtB;;AACA,IAAIC,KAAK,GAAGL,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIM,OAAO,GAAGD,KAAK,CAACC,OAApB;AACA,IAAIC,QAAQ,GAAGF,KAAK,CAACE,QAArB;AACA,IAAIC,MAAM,GAAGH,KAAK,CAACG,MAAnB;AACA,IAAIC,KAAK,GAAGC,KAAK,CAACC,SAAN,CAAgBF,KAA5B;;AACA,IAAIG,UAAU,GAAGZ,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIa,QAAQ,GAAGb,OAAO,CAAC,aAAD,CAAP,CAAuBa,QAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,OAAO,CAACC,aAAR,GAAwB,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AACzD,MAAID,IAAI,IAAI,IAAZ,EAAkB;AAChB,WAAO,EAAP;AACD;;AACD,MAAIA,IAAI,CAACE,OAAT,EAAkB;AAChB,WAAOD,KAAK,GAAGX,QAAQ,CAACU,IAAI,CAACG,GAAL,EAAD,CAAX,GAA0BH,IAAI,CAACG,GAAL,EAAtC;AACD;;AACD,MAAIV,KAAK,CAACW,OAAN,CAAcJ,IAAd,CAAJ,EAAyB;AACvB,WAAOA,IAAI,CAACK,MAAL,CACL,UAAUC,QAAV,EAAoBC,EAApB,EAAwB;AACtB,aAAOD,QAAQ,CAACE,MAAT,CAAgB,KAAKV,aAAL,CAAmBS,EAAnB,EAAuBN,KAAvB,CAAhB,CAAP;AACD,KAFD,CAEEQ,IAFF,CAEO,IAFP,CADK,EAIL,EAJK,CAAP;AAMD;;AACD,MAAI,OAAOT,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOlB,KAAK,CAACkB,IAAD,EAAO,KAAKU,OAAZ,EAAqB,KAArB,CAAL,CAAiCC,QAAxC;AACD;;AACD,SAAOV,KAAK,GAAGX,QAAQ,CAAC,CAACU,IAAD,CAAD,CAAX,GAAsB,CAACA,IAAD,CAAlC;AACD,CAnBD;;AAqBA,SAASY,OAAT,CAAiBC,YAAjB,EAA+B;AAC7B,SAAO,YAAY;AACjB,QAAIC,KAAK,GAAGtB,KAAK,CAACuB,IAAN,CAAWC,SAAX,CAAZ;AACA,QAAIC,OAAO,GAAG,KAAKC,MAAL,GAAc,CAA5B;AAEA,WAAO7B,OAAO,CAAC,IAAD,EAAO,UAAU8B,CAAV,EAAaZ,EAAb,EAAiB;AACpC,UAAIa,MAAM,GACR,OAAON,KAAK,CAAC,CAAD,CAAZ,KAAoB,UAApB,GACIA,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAcR,EAAd,EAAkBY,CAAlB,EAAqBnC,IAAI,CAACuB,EAAE,CAACI,QAAJ,CAAzB,CADJ,GAEIG,KAHN;;AAKA,UAAIO,GAAG,GAAG,KAAKvB,aAAL,CAAmBsB,MAAnB,EAA2BD,CAAC,GAAGF,OAA/B,CAAV;;AACAJ,MAAAA,YAAY,CAACQ,GAAD,EAAMd,EAAE,CAACI,QAAT,EAAmBJ,EAAnB,CAAZ;AACD,KARa,CAAd;AASD,GAbD;AAcD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,YAAT,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwCC,WAAxC,EAAqDnB,QAArD,EAA+DoB,MAA/D,EAAuE;AACrE,MAAIC,UAAU,GAAG,CAACH,SAAD,EAAYC,WAAZ,EAAyBjB,MAAzB,CAAgCF,QAAhC,CAAjB;AACA,MAAIsB,IAAI,GAAGL,KAAK,CAACC,SAAS,GAAG,CAAb,CAAL,IAAwB,IAAnC;AACA,MAAIK,IAAI,GAAGN,KAAK,CAACC,SAAS,GAAGC,WAAb,CAAL,IAAkC,IAA7C,CAHqE,CAKrE;AACA;;AACA,OAAK,IAAIK,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGxB,QAAQ,CAACY,MAAjC,EAAyC,EAAEY,GAA3C,EAAgD;AAC9C,QAAIC,IAAI,GAAGzB,QAAQ,CAACwB,GAAD,CAAnB;AACA,QAAIE,SAAS,GAAGD,IAAI,CAACL,MAArB;AACA,QAAIO,OAAO,GAAGD,SAAS,IAAIA,SAAS,CAACrB,QAAV,CAAmBuB,OAAnB,CAA2B5B,QAAQ,CAACwB,GAAD,CAAnC,CAA3B;;AAEA,QAAIE,SAAS,IAAIC,OAAO,GAAG,CAAC,CAA5B,EAA+B;AAC7BD,MAAAA,SAAS,CAACrB,QAAV,CAAmBwB,MAAnB,CAA0BF,OAA1B,EAAmC,CAAnC;;AACA,UAAIP,MAAM,KAAKM,SAAX,IAAwBR,SAAS,GAAGS,OAAxC,EAAiD;AAC/CN,QAAAA,UAAU,CAAC,CAAD,CAAV;AACD;AACF;;AAEDI,IAAAA,IAAI,CAACL,MAAL,GAAcA,MAAd;;AAEA,QAAIK,IAAI,CAACH,IAAT,EAAe;AACbG,MAAAA,IAAI,CAACH,IAAL,CAAUC,IAAV,GAAiBE,IAAI,CAACF,IAAL,IAAa,IAA9B;AACD;;AAED,QAAIE,IAAI,CAACF,IAAT,EAAe;AACbE,MAAAA,IAAI,CAACF,IAAL,CAAUD,IAAV,GAAiBG,IAAI,CAACH,IAAL,IAAa,IAA9B;AACD;;AAEDG,IAAAA,IAAI,CAACH,IAAL,GAAYtB,QAAQ,CAACwB,GAAG,GAAG,CAAP,CAAR,IAAqBF,IAAjC;AACAG,IAAAA,IAAI,CAACF,IAAL,GAAYvB,QAAQ,CAACwB,GAAG,GAAG,CAAP,CAAR,IAAqBD,IAAjC;AACD;;AAED,MAAID,IAAJ,EAAU;AACRA,IAAAA,IAAI,CAACC,IAAL,GAAYvB,QAAQ,CAAC,CAAD,CAApB;AACD;;AACD,MAAIuB,IAAJ,EAAU;AACRA,IAAAA,IAAI,CAACD,IAAL,GAAYtB,QAAQ,CAACA,QAAQ,CAACY,MAAT,GAAkB,CAAnB,CAApB;AACD;;AACD,SAAOK,KAAK,CAACY,MAAN,CAAaC,KAAb,CAAmBb,KAAnB,EAA0BI,UAA1B,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9B,OAAO,CAACwC,QAAR,GAAmB,UAAUC,MAAV,EAAkB;AACnC,MAAI,CAACA,MAAM,CAACpC,OAAZ,EAAqB;AACnBoC,IAAAA,MAAM,GAAG,KAAKC,WAAL,CAAiBxB,IAAjB,CACP,KAAKwB,WADE,EAEPD,MAFO,EAGP,IAHO,EAIP,KAAKE,aAJE,CAAT;AAMD;;AAEDF,EAAAA,MAAM,CAACG,MAAP,CAAc,IAAd;AAEA,SAAO,IAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA5C,OAAO,CAAC6C,SAAR,GAAoB,UAAUJ,MAAV,EAAkB;AACpC,MAAI,CAACA,MAAM,CAACpC,OAAZ,EAAqB;AACnBoC,IAAAA,MAAM,GAAG,KAAKC,WAAL,CAAiBxB,IAAjB,CACP,KAAKwB,WADE,EAEPD,MAFO,EAGP,IAHO,EAIP,KAAKE,aAJE,CAAT;AAMD;;AAEDF,EAAAA,MAAM,CAACK,OAAP,CAAe,IAAf;AAEA,SAAO,IAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA9C,OAAO,CAAC4C,MAAR,GAAiB7B,OAAO,CAAC,UAAUS,GAAV,EAAeV,QAAf,EAAyBe,MAAzB,EAAiC;AACxDJ,EAAAA,YAAY,CAACX,QAAD,EAAWA,QAAQ,CAACO,MAApB,EAA4B,CAA5B,EAA+BG,GAA/B,EAAoCK,MAApC,CAAZ;AACD,CAFuB,CAAxB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA7B,OAAO,CAAC8C,OAAR,GAAkB/B,OAAO,CAAC,UAAUS,GAAV,EAAeV,QAAf,EAAyBe,MAAzB,EAAiC;AACzDJ,EAAAA,YAAY,CAACX,QAAD,EAAW,CAAX,EAAc,CAAd,EAAiBU,GAAjB,EAAsBK,MAAtB,CAAZ;AACD,CAFwB,CAAzB;;AAIA,SAASkB,KAAT,CAAeC,MAAf,EAAuB;AACrB,SAAO,UAAUC,OAAV,EAAmB;AACxB,QAAIC,SAAS,GAAG,OAAOD,OAAP,KAAmB,UAAnB,IAAiCA,OAAjD;AACA,QAAI7B,OAAO,GAAG,KAAKC,MAAL,GAAc,CAA5B;AACA,QAAI8B,UAAU,GAAG,KAAKC,OAAL,GAAeC,IAAf,EAAjB;;AAEA,SAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,MAAzB,EAAiCC,CAAC,EAAlC,EAAsC;AACpC,UAAIZ,EAAE,GAAG,KAAKY,CAAL,CAAT;;AAEA,UAAI4B,SAAJ,EAAe;AACbD,QAAAA,OAAO,GAAGC,SAAS,CAAChC,IAAV,CAAeR,EAAf,EAAmBY,CAAnB,CAAV;AACD;;AAED,UAAI,OAAO2B,OAAP,KAAmB,QAAnB,IAA+B,CAACvD,MAAM,CAACuD,OAAD,CAA1C,EAAqD;AACnDA,QAAAA,OAAO,GAAGE,UAAU,CAACG,IAAX,CAAgBL,OAAhB,EAAyB7C,KAAzB,EAAV;AACD;;AAED,UAAImD,UAAU,GAAG,KAAKtD,aAAL,CAAmBgD,OAAnB,EAA4B3B,CAAC,GAAGF,OAAhC,EAAyCzB,KAAzC,CAA+C,CAA/C,EAAkD,CAAlD,CAAjB;;AACA,UAAI6D,gBAAgB,GAAGD,UAAU,CAAC,CAAD,CAAjC,CAZoC,CAapC;AACA;;AACA,UAAIE,CAAC,GAAG,CAAR;;AAEA,aACED,gBAAgB,IAChBA,gBAAgB,CAAC1C,QADjB,IAEA2C,CAAC,GAAGD,gBAAgB,CAAC1C,QAAjB,CAA0BO,MAHhC,EAIE;AACA,YAAImC,gBAAgB,CAAC1C,QAAjB,CAA0B2C,CAA1B,EAA6BC,IAA7B,KAAsC,KAA1C,EAAiD;AAC/CF,UAAAA,gBAAgB,GAAGA,gBAAgB,CAAC1C,QAAjB,CAA0B2C,CAA1B,CAAnB;AACAA,UAAAA,CAAC,GAAG,CAAJ;AACD,SAHD,MAGO;AACLA,UAAAA,CAAC;AACF;AACF;;AAEDT,MAAAA,MAAM,CAACtC,EAAD,EAAK8C,gBAAL,EAAuBD,UAAvB,CAAN;AACD;;AAED,WAAO,IAAP;AACD,GAvCD;AAwCD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAvD,OAAO,CAAC2D,IAAR,GAAeZ,KAAK,CAAC,UAAUrC,EAAV,EAAc8C,gBAAd,EAAgCD,UAAhC,EAA4C;AAC/D,MAAI1B,MAAM,GAAGnB,EAAE,CAACmB,MAAhB;AACA,MAAI+B,QAAQ,GAAG/B,MAAM,CAACf,QAAtB;AACA,MAAI+C,KAAK,GAAGD,QAAQ,CAACvB,OAAT,CAAiB3B,EAAjB,CAAZ;AAEArB,EAAAA,SAAS,CAAC,CAACqB,EAAD,CAAD,EAAO8C,gBAAP,CAAT,CAL+D,CAM/D;AACA;AACA;;AACA/B,EAAAA,YAAY,CAACmC,QAAD,EAAWC,KAAX,EAAkB,CAAlB,EAAqBN,UAArB,EAAiC1B,MAAjC,CAAZ;AACD,CAVmB,CAApB;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA7B,OAAO,CAAC8D,SAAR,GAAoBf,KAAK,CAAC,UAAUrC,EAAV,EAAc8C,gBAAd,EAAgCD,UAAhC,EAA4C;AACpElE,EAAAA,SAAS,CAACqB,EAAE,CAACI,QAAJ,EAAc0C,gBAAd,CAAT;AACAnE,EAAAA,SAAS,CAACkE,UAAD,EAAa7C,EAAb,CAAT;AACD,CAHwB,CAAzB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAV,OAAO,CAAC+D,MAAR,GAAiB,UAAUC,QAAV,EAAoB;AACnC,MAAIC,IAAI,GAAG,IAAX;AACA,OAAKpC,MAAL,CAAYmC,QAAZ,EACGE,GADH,CACO,MADP,EAEGC,IAFH,CAEQ,UAAU7C,CAAV,EAAaZ,EAAb,EAAiB;AACrBuD,IAAAA,IAAI,CAACG,KAAL,CAAW1D,EAAX,EAAe2D,WAAf,CAA2B3D,EAAE,CAACI,QAA9B;AACD,GAJH;AAKA,SAAO,IAAP;AACD,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAd,OAAO,CAACsE,OAAR,GAAkB,UAAUrB,OAAV,EAAmB;AACnC,MAAI,KAAK,CAAL,CAAJ,EAAa;AACX,QAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjCA,MAAAA,OAAO,GAAGA,OAAO,CAAC/B,IAAR,CAAa,KAAK,CAAL,CAAb,CAAV;AACD;;AAED,QAAIyC,IAAI,GAAG,KAAKS,KAAL,CAAWnB,OAAX,EAAoBsB,YAApB,CAAiC,KAAK,CAAL,CAAjC,CAAX,CALW,CAOX;;;AACA,QAAIf,gBAAgB,GAAG;AAAE1C,MAAAA,QAAQ,EAAE6C;AAAZ,KAAvB;AACA,QAAIF,CAAC,GAAG,CAAR,CATW,CAWX;AACA;;AACA,WACED,gBAAgB,IAChBA,gBAAgB,CAAC1C,QADjB,IAEA2C,CAAC,GAAGD,gBAAgB,CAAC1C,QAAjB,CAA0BO,MAHhC,EAIE;AACA,UAAImC,gBAAgB,CAAC1C,QAAjB,CAA0B2C,CAA1B,EAA6BC,IAA7B,KAAsC,KAA1C,EAAiD;AAC/CF,QAAAA,gBAAgB,GAAGA,gBAAgB,CAAC1C,QAAjB,CAA0B2C,CAA1B,CAAnB;AACAA,QAAAA,CAAC,GAAG,CAAJ;AACD,OAHD,MAGO;AACLA,QAAAA,CAAC;AACF;AACF;;AAED,SAAKW,KAAL,CAAWZ,gBAAX,EAA6BZ,MAA7B,CAAoC,IAApC;AACD;;AACD,SAAO,IAAP;AACD,CA9BD;AAgCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA5C,OAAO,CAACwE,KAAR,GAAgB,YAAY;AAC1B,MAAIvD,KAAK,GAAGtB,KAAK,CAACuB,IAAN,CAAWC,SAAX,CAAZ;AACA,MAAIC,OAAO,GAAG,KAAKC,MAAL,GAAc,CAA5B;AAEA,SAAO7B,OAAO,CAAC,IAAD,EAAO,UAAU8B,CAAV,EAAaZ,EAAb,EAAiB;AACpC,QAAImB,MAAM,GAAGnB,EAAE,CAACmB,MAAhB;;AACA,QAAI,CAACA,MAAL,EAAa;AACX;AACD;;AAED,QAAI+B,QAAQ,GAAG/B,MAAM,CAACf,QAAtB;AACA,QAAI+C,KAAK,GAAGD,QAAQ,CAACvB,OAAT,CAAiB3B,EAAjB,CAAZ,CAPoC,CASpC;;AACA;;AACA,QAAImD,KAAK,GAAG,CAAZ,EAAe;AAEf,QAAItC,MAAM,GACR,OAAON,KAAK,CAAC,CAAD,CAAZ,KAAoB,UAApB,GACIA,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAcR,EAAd,EAAkBY,CAAlB,EAAqBnC,IAAI,CAACuB,EAAE,CAACI,QAAJ,CAAzB,CADJ,GAEIG,KAHN;;AAKA,QAAIO,GAAG,GAAG,KAAKvB,aAAL,CAAmBsB,MAAnB,EAA2BD,CAAC,GAAGF,OAA/B,CAAV,CAlBoC,CAoBpC;;;AACAK,IAAAA,YAAY,CAACmC,QAAD,EAAWC,KAAK,GAAG,CAAnB,EAAsB,CAAtB,EAAyBrC,GAAzB,EAA8BK,MAA9B,CAAZ;AACD,GAtBa,CAAd;AAuBD,CA3BD;AA6BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7B,OAAO,CAACyE,WAAR,GAAsB,UAAUhC,MAAV,EAAkB;AACtC,MAAIiC,MAAM,GAAG,EAAb;AACA,MAAIT,IAAI,GAAG,IAAX;;AACA,MAAI,OAAOxB,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,IAAAA,MAAM,GAAG,KAAKC,WAAL,CAAiBxB,IAAjB,CACP,KAAKwB,WADE,EAEPD,MAFO,EAGP,IAHO,EAIP,KAAKE,aAJE,CAAT;AAMD;;AACDF,EAAAA,MAAM,GAAG,KAAKxC,aAAL,CAAmBwC,MAAnB,CAAT;AACAwB,EAAAA,IAAI,CAACU,MAAL;AACAnF,EAAAA,OAAO,CAACiD,MAAD,EAAS,UAAUnB,CAAV,EAAaZ,EAAb,EAAiB;AAC/B,QAAIkE,UAAU,GAAGX,IAAI,CAAChE,aAAL,CAAmBgE,IAAI,CAAC7D,KAAL,EAAnB,CAAjB;;AACA,QAAIyB,MAAM,GAAGnB,EAAE,CAACmB,MAAhB;;AACA,QAAI,CAACA,MAAL,EAAa;AACX;AACD;;AAED,QAAI+B,QAAQ,GAAG/B,MAAM,CAACf,QAAtB;AACA,QAAI+C,KAAK,GAAGD,QAAQ,CAACvB,OAAT,CAAiB3B,EAAjB,CAAZ,CAR+B,CAU/B;;AACA;;AACA,QAAImD,KAAK,GAAG,CAAZ,EAAe,OAZgB,CAc/B;;AACApC,IAAAA,YAAY,CAACmC,QAAD,EAAWC,KAAK,GAAG,CAAnB,EAAsB,CAAtB,EAAyBe,UAAzB,EAAqC/C,MAArC,CAAZ;AACA6C,IAAAA,MAAM,CAACG,IAAP,CAAYD,UAAZ;AACD,GAjBM,CAAP;AAkBA,SAAO,KAAKlC,WAAL,CAAiBxB,IAAjB,CAAsB,KAAKwB,WAA3B,EAAwC,KAAKzC,aAAL,CAAmByE,MAAnB,CAAxC,CAAP;AACD,CAhCD;AAkCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1E,OAAO,CAAC8E,MAAR,GAAiB,YAAY;AAC3B,MAAI7D,KAAK,GAAGtB,KAAK,CAACuB,IAAN,CAAWC,SAAX,CAAZ;AACA,MAAIC,OAAO,GAAG,KAAKC,MAAL,GAAc,CAA5B;AAEA,SAAO7B,OAAO,CAAC,IAAD,EAAO,UAAU8B,CAAV,EAAaZ,EAAb,EAAiB;AACpC,QAAImB,MAAM,GAAGnB,EAAE,CAACmB,MAAhB;;AACA,QAAI,CAACA,MAAL,EAAa;AACX;AACD;;AAED,QAAI+B,QAAQ,GAAG/B,MAAM,CAACf,QAAtB;AACA,QAAI+C,KAAK,GAAGD,QAAQ,CAACvB,OAAT,CAAiB3B,EAAjB,CAAZ,CAPoC,CASpC;;AACA;;AACA,QAAImD,KAAK,GAAG,CAAZ,EAAe;AAEf,QAAItC,MAAM,GACR,OAAON,KAAK,CAAC,CAAD,CAAZ,KAAoB,UAApB,GACIA,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAcR,EAAd,EAAkBY,CAAlB,EAAqBnC,IAAI,CAACuB,EAAE,CAACI,QAAJ,CAAzB,CADJ,GAEIG,KAHN;;AAKA,QAAIO,GAAG,GAAG,KAAKvB,aAAL,CAAmBsB,MAAnB,EAA2BD,CAAC,GAAGF,OAA/B,CAAV,CAlBoC,CAoBpC;;;AACAK,IAAAA,YAAY,CAACmC,QAAD,EAAWC,KAAX,EAAkB,CAAlB,EAAqBrC,GAArB,EAA0BK,MAA1B,CAAZ;AACD,GAtBa,CAAd;AAuBD,CA3BD;AA6BA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7B,OAAO,CAACuE,YAAR,GAAuB,UAAU9B,MAAV,EAAkB;AACvC,MAAIiC,MAAM,GAAG,EAAb;AACA,MAAIT,IAAI,GAAG,IAAX;;AACA,MAAI,OAAOxB,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,IAAAA,MAAM,GAAG,KAAKC,WAAL,CAAiBxB,IAAjB,CACP,KAAKwB,WADE,EAEPD,MAFO,EAGP,IAHO,EAIP,KAAKE,aAJE,CAAT;AAMD;;AACDF,EAAAA,MAAM,GAAG,KAAKxC,aAAL,CAAmBwC,MAAnB,CAAT;AACAwB,EAAAA,IAAI,CAACU,MAAL;AACAnF,EAAAA,OAAO,CAACiD,MAAD,EAAS,UAAUsC,CAAV,EAAarE,EAAb,EAAiB;AAC/B,QAAIkE,UAAU,GAAGX,IAAI,CAAChE,aAAL,CAAmBgE,IAAI,CAAC7D,KAAL,EAAnB,CAAjB;;AACA,QAAIyB,MAAM,GAAGnB,EAAE,CAACmB,MAAhB;;AACA,QAAI,CAACA,MAAL,EAAa;AACX;AACD;;AAED,QAAI+B,QAAQ,GAAG/B,MAAM,CAACf,QAAtB;AACA,QAAI+C,KAAK,GAAGD,QAAQ,CAACvB,OAAT,CAAiB3B,EAAjB,CAAZ,CAR+B,CAU/B;;AACA;;AACA,QAAImD,KAAK,GAAG,CAAZ,EAAe,OAZgB,CAc/B;;AACApC,IAAAA,YAAY,CAACmC,QAAD,EAAWC,KAAX,EAAkB,CAAlB,EAAqBe,UAArB,EAAiC/C,MAAjC,CAAZ;AACA6C,IAAAA,MAAM,CAACG,IAAP,CAAYD,UAAZ;AACD,GAjBM,CAAP;AAkBA,SAAO,KAAKlC,WAAL,CAAiBxB,IAAjB,CAAsB,KAAKwB,WAA3B,EAAwC,KAAKzC,aAAL,CAAmByE,MAAnB,CAAxC,CAAP;AACD,CAhCD;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1E,OAAO,CAAC2E,MAAR,GAAiB,UAAUX,QAAV,EAAoB;AACnC;AACA,MAAI/C,KAAK,GAAG+C,QAAQ,GAAG,KAAKgB,MAAL,CAAYhB,QAAZ,CAAH,GAA2B,IAA/C;AAEAxE,EAAAA,OAAO,CAACyB,KAAD,EAAQ,UAAU8D,CAAV,EAAarE,EAAb,EAAiB;AAC9BX,IAAAA,QAAQ,CAACkF,aAAT,CAAuBvE,EAAvB;AACAA,IAAAA,EAAE,CAACqB,IAAH,GAAUrB,EAAE,CAACsB,IAAH,GAAUtB,EAAE,CAACmB,MAAH,GAAY,IAAhC;AACD,GAHM,CAAP;AAKA,SAAO,IAAP;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA7B,OAAO,CAACqE,WAAR,GAAsB,UAAUa,OAAV,EAAmB;AACvC,SAAO1F,OAAO,CAAC,IAAD,EAAO,UAAU8B,CAAV,EAAaZ,EAAb,EAAiB;AACpC,QAAImB,MAAM,GAAGnB,EAAE,CAACmB,MAAhB;;AACA,QAAI,CAACA,MAAL,EAAa;AACX;AACD;;AAED,QAAI+B,QAAQ,GAAG/B,MAAM,CAACf,QAAtB;;AACA,QAAIU,GAAG,GAAG,KAAKvB,aAAL,CACR,OAAOiF,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,CAAChE,IAAR,CAAaR,EAAb,EAAiBY,CAAjB,EAAoBZ,EAApB,CAAhC,GAA0DwE,OADlD,CAAV,CAPoC,CAWpC;AACA;;;AACA7F,IAAAA,SAAS,CAACmC,GAAD,EAAM,IAAN,CAAT;AAEA,QAAIqC,KAAK,GAAGD,QAAQ,CAACvB,OAAT,CAAiB3B,EAAjB,CAAZ,CAfoC,CAiBpC;;AACAe,IAAAA,YAAY,CAACmC,QAAD,EAAWC,KAAX,EAAkB,CAAlB,EAAqBrC,GAArB,EAA0BK,MAA1B,CAAZ;;AAEA,QAAIL,GAAG,CAACa,OAAJ,CAAY3B,EAAZ,IAAkB,CAAtB,EAAyB;AACvBA,MAAAA,EAAE,CAACmB,MAAH,GAAYnB,EAAE,CAACqB,IAAH,GAAUrB,EAAE,CAACsB,IAAH,GAAU,IAAhC;AACD;AACF,GAvBa,CAAd;AAwBD,CAzBD;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhC,OAAO,CAACmF,KAAR,GAAgB,YAAY;AAC1B,SAAO3F,OAAO,CAAC,IAAD,EAAO,UAAUuF,CAAV,EAAarE,EAAb,EAAiB;AACpCA,IAAAA,EAAE,CAACI,QAAH,CAAYsE,OAAZ,CAAoB,UAAUC,KAAV,EAAiB;AACnCA,MAAAA,KAAK,CAACrD,IAAN,GAAaqD,KAAK,CAACtD,IAAN,GAAasD,KAAK,CAACxD,MAAN,GAAe,IAAzC;AACD,KAFD;AAIAnB,IAAAA,EAAE,CAACI,QAAH,CAAYO,MAAZ,GAAqB,CAArB;AACD,GANa,CAAd;AAOD,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACArB,OAAO,CAACb,IAAR,GAAe,UAAUmG,GAAV,EAAe;AAC5B,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AACrB,QAAI,CAAC,KAAK,CAAL,CAAD,IAAY,CAAC,KAAK,CAAL,EAAQzE,QAAzB,EAAmC,OAAO,IAAP;AACnC,WAAO3B,IAAI,CAAC,KAAK,CAAL,EAAQ2B,QAAT,EAAmB,KAAKD,OAAxB,CAAX;AACD;;AAED,MAAI2E,IAAI,GAAGC,MAAM,CAAClD,KAAP,CAAa,EAAb,EAAiB,KAAK1B,OAAtB,CAAX,CAN4B,CAMe;;AAE3C,SAAOrB,OAAO,CAAC,IAAD,EAAO,UAAUuF,CAAV,EAAarE,EAAb,EAAiB;AACpCA,IAAAA,EAAE,CAACI,QAAH,CAAYsE,OAAZ,CAAoB,UAAUC,KAAV,EAAiB;AACnCA,MAAAA,KAAK,CAACrD,IAAN,GAAaqD,KAAK,CAACtD,IAAN,GAAasD,KAAK,CAACxD,MAAN,GAAe,IAAzC;AACD,KAFD;AAIA2D,IAAAA,IAAI,CAACE,OAAL,GAAehF,EAAf;AAEA,QAAIwE,OAAO,GAAGI,GAAG,CAACjF,OAAJ,GACViF,GAAG,CAAClF,KAAJ,GAAYE,GAAZ,EADU,GAEVrB,KAAK,CAAC,KAAKqG,GAAN,EAAWE,IAAX,EAAiB,KAAjB,CAAL,CAA6B1E,QAFjC;AAIAzB,IAAAA,SAAS,CAAC6F,OAAD,EAAUxE,EAAV,CAAT;AACD,GAZa,CAAd;AAaD,CArBD;AAuBA;AACA;AACA;AACA;AACA;;;AACAV,OAAO,CAAC2F,QAAR,GAAmB,YAAY;AAC7B,SAAOxG,IAAI,CAAC,IAAD,EAAO,KAAK0B,OAAZ,CAAX;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAb,OAAO,CAACZ,IAAR,GAAe,UAAUkG,GAAV,EAAe;AAC5B;AACA,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AACrB,WAAOnG,IAAI,CAAC,IAAD,CAAX;AACD;;AACD,MAAI,OAAOkG,GAAP,KAAe,UAAnB,EAA+B;AAC7B;AACA,WAAO9F,OAAO,CAAC,IAAD,EAAO,UAAU8B,CAAV,EAAaZ,EAAb,EAAiB;AACpC,aAAOV,OAAO,CAACZ,IAAR,CAAa8B,IAAb,CAAkB,KAAKkD,KAAL,CAAW1D,EAAX,CAAlB,EAAkC4E,GAAG,CAACpE,IAAJ,CAASR,EAAT,EAAaY,CAAb,EAAgBlC,IAAI,CAAC,CAACsB,EAAD,CAAD,CAApB,CAAlC,CAAP;AACD,KAFa,CAAd;AAGD,GAV2B,CAY5B;;;AACA,SAAOlB,OAAO,CAAC,IAAD,EAAO,UAAUuF,CAAV,EAAarE,EAAb,EAAiB;AACpCA,IAAAA,EAAE,CAACI,QAAH,CAAYsE,OAAZ,CAAoB,UAAUC,KAAV,EAAiB;AACnCA,MAAAA,KAAK,CAACrD,IAAN,GAAaqD,KAAK,CAACtD,IAAN,GAAasD,KAAK,CAACxD,MAAN,GAAe,IAAzC;AACD,KAFD;AAIA,QAAI+D,QAAQ,GAAG,IAAI9F,UAAU,CAAC+F,IAAf,CAAoBP,GAApB,CAAf;AAEAjG,IAAAA,SAAS,CAACuG,QAAD,EAAWlF,EAAX,CAAT;AACD,GARa,CAAd;AASD,CAtBD;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,OAAO,CAACI,KAAR,GAAgB,YAAY;AAC1B,SAAO,KAAKgE,KAAL,CAAW3E,QAAQ,CAAC,KAAKa,GAAL,EAAD,CAAnB,CAAP;AACD,CAFD","sourcesContent":["'use strict';\n/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\n\nvar parse = require('../parse');\nvar html = require('../static').html;\nvar text = require('../static').text;\nvar updateDOM = parse.update;\nvar utils = require('../utils');\nvar domEach = utils.domEach;\nvar cloneDom = utils.cloneDom;\nvar isHtml = utils.isHtml;\nvar slice = Array.prototype.slice;\nvar domhandler = require('domhandler');\nvar DomUtils = require('htmlparser2').DomUtils;\n\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if necessary.\n *\n * @private\n * @param {Cheerio | string | Cheerio[] | string[]} [elem] - Elements to make an array of.\n * @param {boolean} [clone] - Optionally clone nodes.\n * @returns {Node[]} The array of nodes.\n */\nexports._makeDomArray = function makeDomArray(elem, clone) {\n  if (elem == null) {\n    return [];\n  }\n  if (elem.cheerio) {\n    return clone ? cloneDom(elem.get()) : elem.get();\n  }\n  if (Array.isArray(elem)) {\n    return elem.reduce(\n      function (newElems, el) {\n        return newElems.concat(this._makeDomArray(el, clone));\n      }.bind(this),\n      []\n    );\n  }\n  if (typeof elem === 'string') {\n    return parse(elem, this.options, false).children;\n  }\n  return clone ? cloneDom([elem]) : [elem];\n};\n\nfunction _insert(concatenator) {\n  return function () {\n    var elems = slice.call(arguments);\n    var lastIdx = this.length - 1;\n\n    return domEach(this, function (i, el) {\n      var domSrc =\n        typeof elems[0] === 'function'\n          ? elems[0].call(el, i, html(el.children))\n          : elems;\n\n      var dom = this._makeDomArray(domSrc, i < lastIdx);\n      concatenator(dom, el.children, el);\n    });\n  };\n}\n\n/**\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @private\n * @param {Node[]} array - Target array to splice.\n * @param {number} spliceIdx - Index at which to begin changing the array.\n * @param {number} spliceCount - Number of elements to remove from the array.\n * @param {Node[]} newElems - Elements to insert into the array.\n * @param {NodeWithChildren} parent - The parent of the node.\n * @returns {Node[]} The spliced array.\n */\nfunction uniqueSplice(array, spliceIdx, spliceCount, newElems, parent) {\n  var spliceArgs = [spliceIdx, spliceCount].concat(newElems);\n  var prev = array[spliceIdx - 1] || null;\n  var next = array[spliceIdx + spliceCount] || null;\n\n  // Before splicing in new elements, ensure they do not already appear in the\n  // current array.\n  for (var idx = 0; idx < newElems.length; ++idx) {\n    var node = newElems[idx];\n    var oldParent = node.parent;\n    var prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);\n\n    if (oldParent && prevIdx > -1) {\n      oldParent.children.splice(prevIdx, 1);\n      if (parent === oldParent && spliceIdx > prevIdx) {\n        spliceArgs[0]--;\n      }\n    }\n\n    node.parent = parent;\n\n    if (node.prev) {\n      node.prev.next = node.next || null;\n    }\n\n    if (node.next) {\n      node.next.prev = node.prev || null;\n    }\n\n    node.prev = newElems[idx - 1] || prev;\n    node.next = newElems[idx + 1] || next;\n  }\n\n  if (prev) {\n    prev.next = newElems[0];\n  }\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n  return array.splice.apply(array, spliceArgs);\n}\n\n/**\n * Insert every element in the set of matched elements to the end of the target.\n *\n * @example\n *   $('<li class=\"plum\">Plum</li>').appendTo('#fruits');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //      <li class=\"plum\">Plum</li>\n *   //    </ul>\n *\n * @param {string | Cheerio} target - Element to append elements to.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/appendTo/}\n */\nexports.appendTo = function (target) {\n  if (!target.cheerio) {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n\n  target.append(this);\n\n  return this;\n};\n\n/**\n * Insert every element in the set of matched elements to the beginning of the target.\n *\n * @example\n *   $('<li class=\"plum\">Plum</li>').prependTo('#fruits');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @param {string | Cheerio} target - Element to prepend elements to.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/prependTo/}\n */\nexports.prependTo = function (target) {\n  if (!target.cheerio) {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n\n  target.prepend(this);\n\n  return this;\n};\n\n/**\n * Inserts content as the *last* child of each of the selected elements.\n *\n * @example\n *   $('ul').append('<li class=\"plum\">Plum</li>');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //      <li class=\"plum\">Plum</li>\n *   //    </ul>\n *\n * @function\n * @see {@link https://api.jquery.com/append/}\n */\nexports.append = _insert(function (dom, children, parent) {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\n\n/**\n * Inserts content as the *first* child of each of the selected elements.\n *\n * @example\n *   $('ul').prepend('<li class=\"plum\">Plum</li>');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @function\n * @see {@link https://api.jquery.com/prepend/}\n */\nexports.prepend = _insert(function (dom, children, parent) {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\n\nfunction _wrap(insert) {\n  return function (wrapper) {\n    var wrapperFn = typeof wrapper === 'function' && wrapper;\n    var lastIdx = this.length - 1;\n    var lastParent = this.parents().last();\n\n    for (var i = 0; i < this.length; i++) {\n      var el = this[i];\n\n      if (wrapperFn) {\n        wrapper = wrapperFn.call(el, i);\n      }\n\n      if (typeof wrapper === 'string' && !isHtml(wrapper)) {\n        wrapper = lastParent.find(wrapper).clone();\n      }\n\n      var wrapperDom = this._makeDomArray(wrapper, i < lastIdx).slice(0, 1);\n      var elInsertLocation = wrapperDom[0];\n      // Find the deepest child. Only consider the first tag child of each node\n      // (ignore text); stop if no children are found.\n      var j = 0;\n\n      while (\n        elInsertLocation &&\n        elInsertLocation.children &&\n        j < elInsertLocation.children.length\n      ) {\n        if (elInsertLocation.children[j].type === 'tag') {\n          elInsertLocation = elInsertLocation.children[j];\n          j = 0;\n        } else {\n          j++;\n        }\n      }\n\n      insert(el, elInsertLocation, wrapperDom);\n    }\n\n    return this;\n  };\n}\n\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the set\n * of matched elements. This method returns the original set of elements for\n * chaining purposes.\n *\n * @example\n *   const redFruit = $('<div class=\"red-fruit\"></div>');\n *   $('.apple').wrap(redFruit);\n *\n *   //=> <ul id=\"fruits\">\n *   //     <div class=\"red-fruit\">\n *   //      <li class=\"apple\">Apple</li>\n *   //     </div>\n *   //     <li class=\"orange\">Orange</li>\n *   //     <li class=\"plum\">Plum</li>\n *   //   </ul>\n *\n *   const healthy = $('<div class=\"healthy\"></div>');\n *   $('li').wrap(healthy);\n *\n *   //=> <ul id=\"fruits\">\n *   //     <div class=\"healthy\">\n *   //       <li class=\"apple\">Apple</li>\n *   //     </div>\n *   //     <div class=\"healthy\">\n *   //       <li class=\"orange\">Orange</li>\n *   //     </div>\n *   //     <div class=\"healthy\">\n *   //        <li class=\"plum\">Plum</li>\n *   //     </div>\n *   //   </ul>\n *\n * @function\n * @param {Cheerio} wrapper - The DOM structure to wrap around each element in\n *   the selection.\n * @see {@link https://api.jquery.com/wrap/}\n */\nexports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {\n  var parent = el.parent;\n  var siblings = parent.children;\n  var index = siblings.indexOf(el);\n\n  updateDOM([el], elInsertLocation);\n  // The previous operation removed the current element from the `siblings`\n  // array, so the `dom` array can be inserted without removing any\n  // additional elements.\n  uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n\n/**\n * The .wrapInner() function can take any string or object that could be passed\n * to the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the\n * set of matched elements.\n *\n * @example\n *   const redFruit = $('<div class=\"red-fruit\"></div>');\n *   $('.apple').wrapInner(redFruit);\n *\n *   //=> <ul id=\"fruits\">\n *   //     <li class=\"apple\">\n *   //       <div class=\"red-fruit\">Apple</div>\n *   //     </li>\n *   //     <li class=\"orange\">Orange</li>\n *   //     <li class=\"pear\">Pear</li>\n *   //   </ul>\n *\n *   const healthy = $('<div class=\"healthy\"></div>');\n *   $('li').wrapInner(healthy);\n *\n *   //=> <ul id=\"fruits\">\n *   //     <li class=\"apple\">\n *   //       <div class=\"healthy\">Apple</div>\n *   //     </li>\n *   //     <li class=\"orange\">\n *   //       <div class=\"healthy\">Orange</div>\n *   //     </li>\n *   //     <li class=\"pear\">\n *   //       <div class=\"healthy\">Pear</div>\n *   //     </li>\n *   //   </ul>\n *\n * @function\n * @param {Cheerio} wrapper - The DOM structure to wrap around the content of\n *   each element in the selection.\n * @see {@link https://api.jquery.com/wrapInner/}\n */\nexports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {\n  updateDOM(el.children, elInsertLocation);\n  updateDOM(wrapperDom, el);\n});\n\n/**\n * The .unwrap() function, removes the parents of the set of matched elements\n * from the DOM, leaving the matched elements in their place.\n *\n * @example <caption>without selector</caption>\n *   const $ = cheerio.load(\n *     '<div id=test>\\n  <div><p>Hello</p></div>\\n  <div><p>World</p></div>\\n</div>'\n *   );\n *   $('#test p').unwrap();\n *\n *   //=> <div id=test>\n *   //     <p>Hello</p>\n *   //     <p>World</p>\n *   //   </div>\n *\n * @example <caption>with selector</caption>\n *   const $ = cheerio.load(\n *     '<div id=test>\\n  <p>Hello</p>\\n  <b><p>World</p></b>\\n</div>'\n *   );\n *   $('#test p').unwrap('b');\n *\n *   //=> <div id=test>\n *   //     <p>Hello</p>\n *   //     <p>World</p>\n *   //   </div>\n *\n * @param {string} [selector] - A selector to check the parent element against.\n *   If an element's parent does not match the selector, the element won't be unwrapped.\n * @returns {Cheerio} The instance itself, for chaining.\n * @see {@link https://api.jquery.com/unwrap/}\n */\nexports.unwrap = function (selector) {\n  var self = this;\n  this.parent(selector)\n    .not('body')\n    .each(function (i, el) {\n      self._make(el).replaceWith(el.children);\n    });\n  return this;\n};\n\n/**\n * The .wrapAll() function can take any string or object that could be passed to\n * the $() function to specify a DOM structure. This structure may be nested\n * several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around all of the elements in the set of matched\n * elements, as a single group.\n *\n * @example <caption>With markup passed to `wrapAll`</caption>\n *   const $ = cheerio.load(\n *     '<div class=\"container\"><div class=\"inner\">First</div><div class=\"inner\">Second</div></div>'\n *   );\n *   $('.inner').wrapAll(\"<div class='new'></div>\");\n *\n *   //=> <div class=\"container\">\n *   //     <div class='new'>\n *   //       <div class=\"inner\">First</div>\n *   //       <div class=\"inner\">Second</div>\n *   //     </div>\n *   //   </div>\n *\n * @example <caption>With an existing cheerio instance</caption>\n *   const $ = cheerio.load(\n *     '<span>Span 1</span><strong>Strong</strong><span>Span 2</span>'\n *   );\n *   const wrap = $('<div><p><em><b></b></em></p></div>');\n *   $('span').wrapAll(wrap);\n *\n *   //=> <div>\n *   //     <p>\n *   //       <em>\n *   //         <b>\n *   //           <span>Span 1</span>\n *   //           <span>Span 2</span>\n *   //         </b>\n *   //       </em>\n *   //     </p>\n *   //   </div>\n *   //   <strong>Strong</strong>\n *\n * @param {Cheerio | string | Element | Element[] | Function} wrapper - The DOM\n *   structure to wrap around all matched elements in the selection.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/wrapAll/}\n */\nexports.wrapAll = function (wrapper) {\n  if (this[0]) {\n    if (typeof wrapper === 'function') {\n      wrapper = wrapper.call(this[0]);\n    }\n\n    var wrap = this._make(wrapper).insertBefore(this[0]);\n\n    // if html is given as wrapper, wrap may contain text elements\n    var elInsertLocation = { children: wrap };\n    var j = 0;\n\n    // Find the deepest child. Only consider the first tag child of each node\n    // (ignore text); stop if no children are found.\n    while (\n      elInsertLocation &&\n      elInsertLocation.children &&\n      j < elInsertLocation.children.length\n    ) {\n      if (elInsertLocation.children[j].type === 'tag') {\n        elInsertLocation = elInsertLocation.children[j];\n        j = 0;\n      } else {\n        j++;\n      }\n    }\n\n    this._make(elInsertLocation).append(this);\n  }\n  return this;\n};\n\n/*eslint-disable jsdoc/check-param-names*/\n\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @example\n *   $('.apple').after('<li class=\"plum\">Plum</li>');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @param {...(string | Element | Element[] | Cheerio | Function)} content -\n *   HTML string, DOM element, array of DOM elements or Cheerio to insert after\n *   each element in the set of matched elements.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/after/}\n */\nexports.after = function () {\n  var elems = slice.call(arguments);\n  var lastIdx = this.length - 1;\n\n  return domEach(this, function (i, el) {\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n\n    var domSrc =\n      typeof elems[0] === 'function'\n        ? elems[0].call(el, i, html(el.children))\n        : elems;\n\n    var dom = this._makeDomArray(domSrc, i < lastIdx);\n\n    // Add element after `this` element\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n};\n\n/*eslint-enable jsdoc/check-param-names*/\n\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @example\n *   $('<li class=\"plum\">Plum</li>').insertAfter('.apple');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @param {string | Cheerio} target - Element to insert elements after.\n * @returns {Cheerio} The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertAfter/}\n */\nexports.insertAfter = function (target) {\n  var clones = [];\n  var self = this;\n  if (typeof target === 'string') {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n\n/*eslint-disable jsdoc/check-param-names*/\n\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @example\n *   $('.apple').before('<li class=\"plum\">Plum</li>');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @param {...(string | Element | Element[] | Cheerio | Function)} content -\n *   HTML string, DOM element, array of DOM elements or Cheerio to insert before\n *   each element in the set of matched elements.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/before/}\n */\nexports.before = function () {\n  var elems = slice.call(arguments);\n  var lastIdx = this.length - 1;\n\n  return domEach(this, function (i, el) {\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n\n    var domSrc =\n      typeof elems[0] === 'function'\n        ? elems[0].call(el, i, html(el.children))\n        : elems;\n\n    var dom = this._makeDomArray(domSrc, i < lastIdx);\n\n    // Add element before `el` element\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n};\n\n/*eslint-enable jsdoc/check-param-names*/\n\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @example\n *   $('<li class=\"plum\">Plum</li>').insertBefore('.apple');\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"plum\">Plum</li>\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //      <li class=\"pear\">Pear</li>\n *   //    </ul>\n *\n * @param {string | Cheerio} target - Element to insert elements before.\n * @returns {Cheerio} The set of newly inserted elements.\n * @see {@link https://api.jquery.com/insertBefore/}\n */\nexports.insertBefore = function (target) {\n  var clones = [];\n  var self = this;\n  if (typeof target === 'string') {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (_, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n\n    // If not found, move on\n    /* istanbul ignore next */\n    if (index < 0) return;\n\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @example\n *   $('.pear').remove();\n *   $.html();\n *   //=>  <ul id=\"fruits\">\n *   //      <li class=\"apple\">Apple</li>\n *   //      <li class=\"orange\">Orange</li>\n *   //    </ul>\n *\n * @param {string} [selector] - Optional selector for elements to remove.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/remove/}\n */\nexports.remove = function (selector) {\n  // Filter if we have selector\n  var elems = selector ? this.filter(selector) : this;\n\n  domEach(elems, function (_, el) {\n    DomUtils.removeElement(el);\n    el.prev = el.next = el.parent = null;\n  });\n\n  return this;\n};\n\n/**\n * Replaces matched elements with `content`.\n *\n * @example\n *   const plum = $('<li class=\"plum\">Plum</li>');\n *   $('.pear').replaceWith(plum);\n *   $.html();\n *   //=> <ul id=\"fruits\">\n *   //     <li class=\"apple\">Apple</li>\n *   //     <li class=\"orange\">Orange</li>\n *   //     <li class=\"plum\">Plum</li>\n *   //   </ul>\n *\n * @param {Cheerio | Function} content - Replacement for matched elements.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/replaceWith/}\n */\nexports.replaceWith = function (content) {\n  return domEach(this, function (i, el) {\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var dom = this._makeDomArray(\n      typeof content === 'function' ? content.call(el, i, el) : content\n    );\n\n    // In the case that `dom` contains nodes that already exist in other\n    // structures, ensure those nodes are properly removed.\n    updateDOM(dom, null);\n\n    var index = siblings.indexOf(el);\n\n    // Completely remove old element\n    uniqueSplice(siblings, index, 1, dom, parent);\n\n    if (dom.indexOf(el) < 0) {\n      el.parent = el.prev = el.next = null;\n    }\n  });\n};\n\n/**\n * Empties an element, removing all its children.\n *\n * @example\n *   $('ul').empty();\n *   $.html();\n *   //=>  <ul id=\"fruits\"></ul>\n *\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/empty/}\n */\nexports.empty = function () {\n  return domEach(this, function (_, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n\n    el.children.length = 0;\n  });\n};\n\n/**\n * Gets an HTML content string from the first selected element. If `htmlString`\n * is specified, each selected element's content is replaced by the new content.\n *\n * @example\n *   $('.orange').html();\n *   //=> Orange\n *\n *   $('#fruits').html('<li class=\"mango\">Mango</li>').html();\n *   //=> <li class=\"mango\">Mango</li>\n *\n * @param {string | Cheerio} str - If specified used to replace selection's contents.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/html/}\n */\nexports.html = function (str) {\n  if (str === undefined) {\n    if (!this[0] || !this[0].children) return null;\n    return html(this[0].children, this.options);\n  }\n\n  var opts = Object.apply({}, this.options); // keep main options\n\n  return domEach(this, function (_, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n\n    opts.context = el;\n\n    var content = str.cheerio\n      ? str.clone().get()\n      : parse('' + str, opts, false).children;\n\n    updateDOM(content, el);\n  });\n};\n\n/**\n * Turns the collection to a string. Alias for `.html()`.\n *\n * @returns {string} The rendered document.\n */\nexports.toString = function () {\n  return html(this, this.options);\n};\n\n/**\n * Get the combined text contents of each element in the set of matched\n * elements, including their descendants. If `textString` is specified, each\n * selected element's content is replaced by the new text content.\n *\n * @example\n *   $('.orange').text();\n *   //=> Orange\n *\n *   $('ul').text();\n *   //=>  Apple\n *   //    Orange\n *   //    Pear\n *\n * @param {string | Function} [str] - If specified replacement for the selected\n *   element's contents.\n * @returns {Cheerio | string} The instance itself when setting text, otherwise\n *   the rendered document.\n * @see {@link https://api.jquery.com/text/}\n */\nexports.text = function (str) {\n  // If `str` is undefined, act as a \"getter\"\n  if (str === undefined) {\n    return text(this);\n  }\n  if (typeof str === 'function') {\n    // Function support\n    return domEach(this, function (i, el) {\n      return exports.text.call(this._make(el), str.call(el, i, text([el])));\n    });\n  }\n\n  // Append text node to each selected elements\n  return domEach(this, function (_, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n\n    var textNode = new domhandler.Text(str);\n\n    updateDOM(textNode, el);\n  });\n};\n\n/**\n * Clone the cheerio object.\n *\n * @example\n *   const moreFruit = $('#fruits').clone();\n *\n * @returns {Cheerio} The cloned object.\n * @see {@link https://api.jquery.com/clone/}\n */\nexports.clone = function () {\n  return this._make(cloneDom(this.get()));\n};\n"]},"metadata":{},"sourceType":"script"}