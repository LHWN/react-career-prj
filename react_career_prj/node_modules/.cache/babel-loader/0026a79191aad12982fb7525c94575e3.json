{"ast":null,"code":"'use strict';\n\nvar parse5 = require('parse5');\n\nvar htmlparser2Adapter = require('parse5-htmlparser2-tree-adapter');\n\nexports.parse = function (content, options, isDocument) {\n  var opts = {\n    scriptingEnabled: typeof options.scriptingEnabled === 'boolean' ? options.scriptingEnabled : true,\n    treeAdapter: htmlparser2Adapter,\n    sourceCodeLocationInfo: options.sourceCodeLocationInfo\n  };\n  var context = options.context;\n  return isDocument ? parse5.parse(content, opts) : parse5.parseFragment(context, content, opts);\n};\n\nexports.render = function (dom) {\n  // `dom-serializer` passes over the special \"root\" node and renders the\n  // node's children in its place. To mimic this behavior with `parse5`, an\n  // equivalent operation must be applied to the input array.\n  var nodes = 'length' in dom ? dom : [dom];\n\n  for (var index = 0; index < nodes.length; index += 1) {\n    if (nodes[index].type === 'root') {\n      nodes.splice.apply(nodes, [index, 1].concat(nodes[index].children));\n    }\n  }\n\n  return parse5.serialize({\n    children: nodes\n  }, {\n    treeAdapter: htmlparser2Adapter\n  });\n};","map":{"version":3,"sources":["/Users/lhwn/Documents/workspace/react_career_prj/node_modules/cheerio/lib/parsers/parse5.js"],"names":["parse5","require","htmlparser2Adapter","exports","parse","content","options","isDocument","opts","scriptingEnabled","treeAdapter","sourceCodeLocationInfo","context","parseFragment","render","dom","nodes","index","length","type","splice","apply","concat","children","serialize"],"mappings":"AAAA;;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,iCAAD,CAAhC;;AAEAE,OAAO,CAACC,KAAR,GAAgB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,UAA5B,EAAwC;AACtD,MAAIC,IAAI,GAAG;AACTC,IAAAA,gBAAgB,EACd,OAAOH,OAAO,CAACG,gBAAf,KAAoC,SAApC,GACIH,OAAO,CAACG,gBADZ,GAEI,IAJG;AAKTC,IAAAA,WAAW,EAAER,kBALJ;AAMTS,IAAAA,sBAAsB,EAAEL,OAAO,CAACK;AANvB,GAAX;AASA,MAAIC,OAAO,GAAGN,OAAO,CAACM,OAAtB;AAEA,SAAOL,UAAU,GACbP,MAAM,CAACI,KAAP,CAAaC,OAAb,EAAsBG,IAAtB,CADa,GAEbR,MAAM,CAACa,aAAP,CAAqBD,OAArB,EAA8BP,OAA9B,EAAuCG,IAAvC,CAFJ;AAGD,CAfD;;AAiBAL,OAAO,CAACW,MAAR,GAAiB,UAAUC,GAAV,EAAe;AAC9B;AACA;AACA;AACA,MAAIC,KAAK,GAAG,YAAYD,GAAZ,GAAkBA,GAAlB,GAAwB,CAACA,GAAD,CAApC;;AACA,OAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,KAAK,CAACE,MAAlC,EAA0CD,KAAK,IAAI,CAAnD,EAAsD;AACpD,QAAID,KAAK,CAACC,KAAD,CAAL,CAAaE,IAAb,KAAsB,MAA1B,EAAkC;AAChCH,MAAAA,KAAK,CAACI,MAAN,CAAaC,KAAb,CAAmBL,KAAnB,EAA0B,CAACC,KAAD,EAAQ,CAAR,EAAWK,MAAX,CAAkBN,KAAK,CAACC,KAAD,CAAL,CAAaM,QAA/B,CAA1B;AACD;AACF;;AAED,SAAOvB,MAAM,CAACwB,SAAP,CACL;AAAED,IAAAA,QAAQ,EAAEP;AAAZ,GADK,EAEL;AAAEN,IAAAA,WAAW,EAAER;AAAf,GAFK,CAAP;AAID,CAfD","sourcesContent":["'use strict';\nvar parse5 = require('parse5');\nvar htmlparser2Adapter = require('parse5-htmlparser2-tree-adapter');\n\nexports.parse = function (content, options, isDocument) {\n  var opts = {\n    scriptingEnabled:\n      typeof options.scriptingEnabled === 'boolean'\n        ? options.scriptingEnabled\n        : true,\n    treeAdapter: htmlparser2Adapter,\n    sourceCodeLocationInfo: options.sourceCodeLocationInfo,\n  };\n\n  var context = options.context;\n\n  return isDocument\n    ? parse5.parse(content, opts)\n    : parse5.parseFragment(context, content, opts);\n};\n\nexports.render = function (dom) {\n  // `dom-serializer` passes over the special \"root\" node and renders the\n  // node's children in its place. To mimic this behavior with `parse5`, an\n  // equivalent operation must be applied to the input array.\n  var nodes = 'length' in dom ? dom : [dom];\n  for (var index = 0; index < nodes.length; index += 1) {\n    if (nodes[index].type === 'root') {\n      nodes.splice.apply(nodes, [index, 1].concat(nodes[index].children));\n    }\n  }\n\n  return parse5.serialize(\n    { children: nodes },\n    { treeAdapter: htmlparser2Adapter }\n  );\n};\n"]},"metadata":{},"sourceType":"script"}