{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport * as AuthAPI from '../../lib/api/auth';\nimport { pender } from 'redux-pender';\nconst SET_LOGGED_INFO = 'user/SET_LOGGED_INFO'; // 로그인 정보 설정\n\nconst SET_VALIDATED = 'user/SET_VALIDATED'; // validated 값 설정\n\nconst LOGOUT = 'user/LOGOUT'; // 로그아웃\n\nconst CHECK_STATUS = 'user/CHECK_STATUS'; // 현재 로그인 상태 확인\n\nexport const setLoggedInfo = createAction(SET_LOGGED_INFO); // loggedInfo\n\nexport const setValidated = createAction(SET_VALIDATED); // validated\n\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\nexport const checkStatus = createAction(CHECK_STATUS, AuthAPI.checkStatus);\nconst initialState = Map({\n  loggedInfo: Map({\n    // 현재 로그인중인 유저의 정보\n    thumbnail: null,\n    username: null\n  }),\n  logged: false,\n  // 현재 로그인중인지 알려준다\n  validated: false // 현재 로그인중인지를 서버 측의 검증을 거쳤음을 의미\n\n});\n/**\n * pender : 비동기 리덕스 액션을 관리할 때 필요하다.\n */\n\nexport default handleActions({\n  [SET_LOGGED_INFO]: (state, action) => state.set('loggedInfo', Map(action.payload)).set('logged', true),\n  [SET_VALIDATED]: (state, action) => state.set('validated', action.payload),\n  ...pender({\n    type: CHECK_STATUS,\n    onSuccess: (state, action) => {\n      state.set('loggedInfo', Map(action.payload.data)).set('validated', true);\n    },\n    onFailure: (state, action) => initialState\n  })\n}, initialState);","map":{"version":3,"sources":["/Users/lhwn/Documents/workspace/react_career_prj/src/redux/modules/user.js"],"names":["createAction","handleActions","Map","AuthAPI","pender","SET_LOGGED_INFO","SET_VALIDATED","LOGOUT","CHECK_STATUS","setLoggedInfo","setValidated","logout","checkStatus","initialState","loggedInfo","thumbnail","username","logged","validated","state","action","set","payload","type","onSuccess","data","onFailure"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AAEA,SAASC,GAAT,QAAoB,WAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,MAAMC,eAAe,GAAG,sBAAxB,C,CAAgD;;AAChD,MAAMC,aAAa,GAAG,oBAAtB,C,CAA4C;;AAC5C,MAAMC,MAAM,GAAG,aAAf,C,CAA8B;;AAC9B,MAAMC,YAAY,GAAG,mBAArB,C,CAA0C;;AAE1C,OAAO,MAAMC,aAAa,GAAGT,YAAY,CAACK,eAAD,CAAlC,C,CAAqD;;AAC5D,OAAO,MAAMK,YAAY,GAAGV,YAAY,CAACM,aAAD,CAAjC,C,CAAkD;;AACzD,OAAO,MAAMK,MAAM,GAAGX,YAAY,CAACO,MAAD,EAASJ,OAAO,CAACQ,MAAjB,CAA3B;AACP,OAAO,MAAMC,WAAW,GAAGZ,YAAY,CAACQ,YAAD,EAAeL,OAAO,CAACS,WAAvB,CAAhC;AAEP,MAAMC,YAAY,GAAGX,GAAG,CAAC;AACvBY,EAAAA,UAAU,EAAEZ,GAAG,CAAC;AACd;AACAa,IAAAA,SAAS,EAAE,IAFG;AAGdC,IAAAA,QAAQ,EAAE;AAHI,GAAD,CADQ;AAMvBC,EAAAA,MAAM,EAAE,KANe;AAMR;AACfC,EAAAA,SAAS,EAAE,KAPY,CAON;;AAPM,CAAD,CAAxB;AAUA;AACA;AACA;;AACA,eAAejB,aAAa,CAC1B;AACE,GAACI,eAAD,GAAmB,CAACc,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAACE,GAAN,CAAU,YAAV,EAAwBnB,GAAG,CAACkB,MAAM,CAACE,OAAR,CAA3B,EAA6CD,GAA7C,CAAiD,QAAjD,EAA2D,IAA3D,CADxC;AAEE,GAACf,aAAD,GAAiB,CAACa,KAAD,EAAQC,MAAR,KAAmBD,KAAK,CAACE,GAAN,CAAU,WAAV,EAAuBD,MAAM,CAACE,OAA9B,CAFtC;AAGE,KAAGlB,MAAM,CAAC;AACRmB,IAAAA,IAAI,EAAEf,YADE;AAERgB,IAAAA,SAAS,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACE,GAAN,CAAU,YAAV,EAAwBnB,GAAG,CAACkB,MAAM,CAACE,OAAP,CAAeG,IAAhB,CAA3B,EAAkDJ,GAAlD,CAAsD,WAAtD,EAAmE,IAAnE;AACD,KAJO;AAKRK,IAAAA,SAAS,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmBP;AALtB,GAAD;AAHX,CAD0B,EAY1BA,YAZ0B,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\n\nimport { Map } from 'immutable';\nimport * as AuthAPI from '../../lib/api/auth';\nimport { pender } from 'redux-pender';\n\nconst SET_LOGGED_INFO = 'user/SET_LOGGED_INFO'; // 로그인 정보 설정\nconst SET_VALIDATED = 'user/SET_VALIDATED'; // validated 값 설정\nconst LOGOUT = 'user/LOGOUT'; // 로그아웃\nconst CHECK_STATUS = 'user/CHECK_STATUS'; // 현재 로그인 상태 확인\n\nexport const setLoggedInfo = createAction(SET_LOGGED_INFO); // loggedInfo\nexport const setValidated = createAction(SET_VALIDATED); // validated\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\nexport const checkStatus = createAction(CHECK_STATUS, AuthAPI.checkStatus);\n\nconst initialState = Map({\n  loggedInfo: Map({\n    // 현재 로그인중인 유저의 정보\n    thumbnail: null,\n    username: null\n  }),\n  logged: false, // 현재 로그인중인지 알려준다\n  validated: false // 현재 로그인중인지를 서버 측의 검증을 거쳤음을 의미\n});\n\n/**\n * pender : 비동기 리덕스 액션을 관리할 때 필요하다.\n */\nexport default handleActions(\n  {\n    [SET_LOGGED_INFO]: (state, action) => state.set('loggedInfo', Map(action.payload)).set('logged', true),\n    [SET_VALIDATED]: (state, action) => state.set('validated', action.payload),\n    ...pender({\n      type: CHECK_STATUS,\n      onSuccess: (state, action) => {\n        state.set('loggedInfo', Map(action.payload.data)).set('validated', true);\n      },\n      onFailure: (state, action) => initialState\n    })\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}