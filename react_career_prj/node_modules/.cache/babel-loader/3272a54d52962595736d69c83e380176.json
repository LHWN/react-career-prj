{"ast":null,"code":"'use strict';\n/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */\n\nvar text = require('../static').text;\n\nvar utils = require('../utils');\n\nvar isTag = utils.isTag;\nvar domEach = utils.domEach;\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar camelCase = utils.camelCase;\nvar cssCase = utils.cssCase;\nvar rspace = /\\s+/;\nvar dataAttrPrefix = 'data-'; // Lookup table for coercing string data-* attributes to their corresponding\n// JavaScript primitives\n\nvar primitives = {\n  null: null,\n  true: true,\n  false: false\n}; // Attributes that are booleans\n\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i; // Matches strings that look like JSON objects or arrays\n\nvar rbrace = /^(?:{[\\w\\W]*}|\\[[\\w\\W]*])$/;\n/**\n * Gets a node's attribute. For boolean attributes, it will return the value's\n * name should it be set.\n *\n * Also supports getting the `value` of several form elements.\n *\n * @private\n * @param {Element} elem - Elenent to get the attribute of.\n * @param {string} name - Name of the attribute.\n * @returns {object | string | undefined} The attribute's value.\n */\n\nfunction getAttr(elem, name) {\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.attribs) {\n    elem.attribs = {};\n  } // Return the entire attribs object if no attribute specified\n\n\n  if (!name) {\n    return elem.attribs;\n  }\n\n  if (hasOwn.call(elem.attribs, name)) {\n    // Get the (decoded) attribute\n    return rboolean.test(name) ? name : elem.attribs[name];\n  } // Mimic the DOM and return text content as value for `option's`\n\n\n  if (elem.name === 'option' && name === 'value') {\n    return text(elem.children);\n  } // Mimic DOM with default value for radios/checkboxes\n\n\n  if (elem.name === 'input' && (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') && name === 'value') {\n    return 'on';\n  }\n}\n/**\n * Sets the value of an attribute. The attribute will be deleted if the value is `null`.\n *\n * @private\n * @param {Element} el - The element to set the attribute on.\n * @param {string} name - The attribute's name.\n * @param {string | null} value - The attribute's value.\n */\n\n\nfunction setAttr(el, name, value) {\n  if (value === null) {\n    removeAttribute(el, name);\n  } else {\n    el.attribs[name] = value + '';\n  }\n}\n/**\n * Method for getting and setting attributes. Gets the attribute value for only\n * the first element in the matched set. If you set an attribute's value to\n * `null`, you remove that attribute. You may also pass a `map` and `function`\n * like jQuery.\n *\n * @example\n *   $('ul').attr('id');\n *   //=> fruits\n *\n *   $('.apple').attr('id', 'favorite').html();\n *   //=> <li class=\"apple\" id=\"favorite\">Apple</li>\n *\n * @param {string} name - Name of the attribute.\n * @param {string | Function} [value] - If specified sets the value of the attribute.\n * @returns {string | Cheerio} If `value` is specified the instance itself,\n *   otherwise the attribute's value.\n * @see {@link https://api.jquery.com/attr/}\n */\n\n\nexports.attr = function (name, value) {\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (i, el) {\n        setAttr(el, name, value.call(el, i, el.attribs[name]));\n      });\n    }\n\n    return domEach(this, function (i, el) {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (objName) {\n          var objValue = name[objName];\n          setAttr(el, objName, objValue);\n        });\n      } else {\n        setAttr(el, name, value);\n      }\n    });\n  }\n\n  return arguments.length > 1 ? this : getAttr(this[0], name);\n};\n/**\n * Gets a node's prop.\n *\n * @private\n * @param {Node} el - Elenent to get the prop of.\n * @param {string} name - Name of the prop.\n * @returns {string | undefined} The prop's value.\n */\n\n\nfunction getProp(el, name) {\n  if (!el || !isTag(el)) return;\n  return name in el ? el[name] : rboolean.test(name) ? getAttr(el, name) !== undefined : getAttr(el, name);\n}\n/**\n * Sets the value of a prop.\n *\n * @private\n * @param {Element} el - The element to set the prop on.\n * @param {string} name - The prop's name.\n * @param {string | null} value - The prop's value.\n */\n\n\nfunction setProp(el, name, value) {\n  if (name in el) {\n    el[name] = value;\n  } else {\n    setAttr(el, name, rboolean.test(name) ? value ? '' : null : value);\n  }\n}\n/**\n * Method for getting and setting properties. Gets the property value for only\n * the first element in the matched set.\n *\n * @example\n *   $('input[type=\"checkbox\"]').prop('checked');\n *   //=> false\n *\n *   $('input[type=\"checkbox\"]').prop('checked', true).val();\n *   //=> ok\n *\n * @param {string} name - Name of the property.\n * @param {any} [value] - If specified set the property to this.\n * @returns {string | Cheerio} If `value` is specified the instance itself,\n *   otherwise the prop's value.\n * @see {@link https://api.jquery.com/prop/}\n */\n\n\nexports.prop = function (name, value) {\n  if (typeof name === 'string' && value === undefined) {\n    switch (name) {\n      case 'style':\n        {\n          var property = this.css();\n          var keys = Object.keys(property);\n          keys.forEach(function (p, i) {\n            property[i] = p;\n          });\n          property.length = keys.length;\n          return property;\n        }\n\n      case 'tagName':\n      case 'nodeName':\n        return this[0].name.toUpperCase();\n\n      case 'outerHTML':\n        return this.clone().wrap('<container />').parent().html();\n\n      case 'innerHTML':\n        return this.html();\n\n      default:\n        return getProp(this[0], name);\n    }\n  }\n\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (j, el) {\n        setProp(el, name, value.call(el, j, getProp(el, name)));\n      });\n    }\n\n    return domEach(this, function (__, el) {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (key) {\n          var val = name[key];\n          setProp(el, key, val);\n        });\n      } else {\n        setProp(el, name, value);\n      }\n    });\n  }\n};\n/**\n * Sets the value of a data attribute.\n *\n * @private\n * @param {Element} el - The element to set the data attribute on.\n * @param {string | object} name - The data attribute's name.\n * @param {string | null} value - The data attribute's value.\n */\n\n\nfunction setData(el, name, value) {\n  if (!el.data) {\n    el.data = {};\n  }\n\n  if (typeof name === 'object') Object.assign(el.data, name);else if (typeof name === 'string' && value !== undefined) {\n    el.data[name] = value;\n  }\n}\n/**\n * Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n * and (if present) cache the value in the node's internal data store. If no\n * attribute name is specified, read *all* HTML5 `data-*` attributes in this manner.\n *\n * @private\n * @param {Element} el - Elenent to get the data attribute of.\n * @param {string} [name] - Name of the data attribute.\n * @returns {any} The data attribute's value, or a map with all of the data attribute.\n */\n\n\nfunction readData(el, name) {\n  var readAll = arguments.length === 1;\n  var domNames;\n  var jsNames;\n  var value;\n\n  if (readAll) {\n    domNames = Object.keys(el.attribs).filter(function (attrName) {\n      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;\n    });\n    jsNames = domNames.map(function (_domName) {\n      return camelCase(_domName.slice(dataAttrPrefix.length));\n    });\n  } else {\n    domNames = [dataAttrPrefix + cssCase(name)];\n    jsNames = [name];\n  }\n\n  for (var idx = 0; idx < domNames.length; ++idx) {\n    var domName = domNames[idx];\n    var jsName = jsNames[idx];\n\n    if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {\n      value = el.attribs[domName];\n\n      if (hasOwn.call(primitives, value)) {\n        value = primitives[value];\n      } else if (value === String(Number(value))) {\n        value = Number(value);\n      } else if (rbrace.test(value)) {\n        try {\n          value = JSON.parse(value);\n        } catch (e) {\n          /* ignore */\n        }\n      }\n\n      el.data[jsName] = value;\n    }\n  }\n\n  return readAll ? el.data : value;\n}\n/**\n * Method for getting and setting data attributes. Gets or sets the data\n * attribute value for only the first element in the matched set.\n *\n * @example\n *   $('<div data-apple-color=\"red\"></div>').data();\n *   //=> { appleColor: 'red' }\n *\n *   $('<div data-apple-color=\"red\"></div>').data('apple-color');\n *   //=> 'red'\n *\n *   const apple = $('.apple').data('kind', 'mac');\n *   apple.data('kind');\n *   //=> 'mac'\n *\n * @param {string} name - Name of the attribute.\n * @param {any} [value] - If specified new value.\n * @returns {string | Cheerio | undefined} If `value` is specified the instance\n *   itself, otherwise the data attribute's value.\n * @see {@link https://api.jquery.com/data/}\n */\n\n\nexports.data = function (name, value) {\n  var elem = this[0];\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.data) {\n    elem.data = {};\n  } // Return the entire data object if no data specified\n\n\n  if (!name) {\n    return readData(elem);\n  } // Set the value (with attr map support)\n\n\n  if (typeof name === 'object' || value !== undefined) {\n    domEach(this, function (i, el) {\n      setData(el, name, value);\n    });\n    return this;\n  }\n\n  if (hasOwn.call(elem.data, name)) {\n    return elem.data[name];\n  }\n\n  return readData(elem, name);\n};\n/**\n * Method for getting and setting the value of input, select, and textarea.\n * Note: Support for `map`, and `function` has not been added yet.\n *\n * @example\n *   $('input[type=\"text\"]').val();\n *   //=> input_text\n *\n *   $('input[type=\"text\"]').val('test').html();\n *   //=> <input type=\"text\" value=\"test\"/>\n *\n * @param {string | string[]} [value] - If specified new value.\n * @returns {string | Cheerio | undefined} If a new `value` is specified the\n *   instance itself, otherwise the value.\n * @see {@link https://api.jquery.com/val/}\n */\n\n\nexports.val = function (value) {\n  var querying = arguments.length === 0;\n  var element = this[0];\n  if (!element) return;\n\n  switch (element.name) {\n    case 'textarea':\n      return this.text(value);\n\n    case 'select':\n      {\n        var option = this.find('option:selected');\n        if (!option) return;\n\n        if (!querying) {\n          if (this.attr('multiple') == null && typeof value === 'object') {\n            return this;\n          }\n\n          if (typeof value !== 'object') {\n            value = [value];\n          }\n\n          this.find('option').removeAttr('selected');\n\n          for (var i = 0; i < value.length; i++) {\n            this.find('option[value=\"' + value[i] + '\"]').attr('selected', '');\n          }\n\n          return this;\n        }\n\n        return this.attr('multiple') ? option.toArray().map(function (el) {\n          return getAttr(el, 'value');\n        }) : option.attr('value');\n      }\n\n    case 'input':\n    case 'option':\n      return querying ? this.attr('value') : this.attr('value', value);\n  }\n};\n/**\n * Remove an attribute.\n *\n * @private\n * @param {Element} elem - Node to remove attribute from.\n * @param {string} name - Name of the attribute to remove.\n */\n\n\nfunction removeAttribute(elem, name) {\n  if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;\n  delete elem.attribs[name];\n}\n/**\n * Splits a space-separated list of names to individual names.\n *\n * @param {string} names - Names to split.\n * @returns {string[]} - Split names.\n */\n\n\nfunction splitNames(names) {\n  return names ? names.trim().split(rspace) : [];\n}\n/**\n * Method for removing attributes by `name`.\n *\n * @example\n *   $('.pear').removeAttr('class').html();\n *   //=> <li>Pear</li>\n *\n *   $('.apple').attr('id', 'favorite');\n *   $('.apple').removeAttr('id class').html();\n *   //=> <li>Apple</li>\n *\n * @param {string} name - Name of the attribute.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/removeAttr/}\n */\n\n\nexports.removeAttr = function (name) {\n  var attrNames = splitNames(name);\n\n  for (var i = 0; i < attrNames.length; i++) {\n    domEach(this, function (_, elem) {\n      removeAttribute(elem, attrNames[i]);\n    });\n  }\n\n  return this;\n};\n/**\n * Check to see if *any* of the matched elements have the given `className`.\n *\n * @example\n *   $('.pear').hasClass('pear');\n *   //=> true\n *\n *   $('apple').hasClass('fruit');\n *   //=> false\n *\n *   $('li').hasClass('pear');\n *   //=> true\n *\n * @param {string} className - Name of the class.\n * @returns {boolean} Indicates if an element has the given `className`.\n * @see {@link https://api.jquery.com/hasClass/}\n */\n\n\nexports.hasClass = function (className) {\n  return this.toArray().some(function (elem) {\n    var clazz = elem.attribs && elem.attribs['class'];\n    var idx = -1;\n\n    if (clazz && className.length) {\n      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {\n        var end = idx + className.length;\n\n        if ((idx === 0 || rspace.test(clazz[idx - 1])) && (end === clazz.length || rspace.test(clazz[end]))) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  });\n};\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function` like jQuery.\n *\n * @example\n *   $('.pear').addClass('fruit').html();\n *   //=> <li class=\"pear fruit\">Pear</li>\n *\n *   $('.apple').addClass('fruit red').html();\n *   //=> <li class=\"apple fruit red\">Apple</li>\n *\n * @param {string | Function} value - Name of new class.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/addClass/}\n */\n\n\nexports.addClass = function (value) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      var className = el.attribs['class'] || '';\n      exports.addClass.call([el], value.call(el, i, className));\n    });\n  } // Return if no value or not a string or function\n\n\n  if (!value || typeof value !== 'string') return this;\n  var classNames = value.split(rspace);\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue; // If we don't already have classes\n\n    var className = getAttr(this[i], 'class');\n\n    if (!className) {\n      setAttr(this[i], 'class', classNames.join(' ').trim());\n    } else {\n      var setClass = ' ' + className + ' '; // Check if class already exists\n\n      for (var j = 0; j < classNames.length; j++) {\n        var appendClass = classNames[j] + ' ';\n        if (setClass.indexOf(' ' + appendClass) < 0) setClass += appendClass;\n      }\n\n      setAttr(this[i], 'class', setClass.trim());\n    }\n  }\n\n  return this;\n};\n/**\n * Removes one or more space-separated classes from the selected elements. If no\n * `className` is defined, all classes will be removed. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *   $('.pear').removeClass('pear').html();\n *   //=> <li class=\"\">Pear</li>\n *\n *   $('.apple').addClass('red').removeClass().html();\n *   //=> <li class=\"\">Apple</li>\n *\n * @param {string | Function} value - Name of the class.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/removeClass/}\n */\n\n\nexports.removeClass = function (value) {\n  // Handle if value is a function\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.removeClass.call([el], value.call(el, i, el.attribs['class'] || ''));\n    });\n  }\n\n  var classes = splitNames(value);\n  var numClasses = classes.length;\n  var removeAll = arguments.length === 0;\n  return domEach(this, function (_, el) {\n    if (!isTag(el)) return;\n\n    if (removeAll) {\n      // Short circuit the remove all case as this is the nice one\n      el.attribs.class = '';\n    } else {\n      var elClasses = splitNames(el.attribs.class);\n      var changed = false;\n\n      for (var j = 0; j < numClasses; j++) {\n        var index = elClasses.indexOf(classes[j]);\n\n        if (index >= 0) {\n          elClasses.splice(index, 1);\n          changed = true; // We have to do another pass to ensure that there are not duplicate\n          // classes listed\n\n          j--;\n        }\n      }\n\n      if (changed) {\n        el.attribs.class = elClasses.join(' ');\n      }\n    }\n  });\n};\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *   $('.apple.green').toggleClass('fruit green red').html();\n *   //=> <li class=\"apple fruit red\">Apple</li>\n *\n *   $('.apple.green').toggleClass('fruit green red', true).html();\n *   //=> <li class=\"apple green fruit red\">Apple</li>\n *\n * @param {string | Function} value - Name of the class. Can also be a function.\n * @param {boolean} [stateVal] - If specified the state of the class.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/toggleClass/}\n */\n\n\nexports.toggleClass = function (value, stateVal) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.toggleClass.call([el], value.call(el, i, el.attribs['class'] || '', stateVal), stateVal);\n    });\n  } // Return if no value or not a string or function\n\n\n  if (!value || typeof value !== 'string') return this;\n  var classNames = value.split(rspace);\n  var numClasses = classNames.length;\n  var state = typeof stateVal === 'boolean' ? stateVal ? 1 : -1 : 0;\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue;\n    var elementClasses = splitNames(this[i].attribs.class); // Check if class already exists\n\n    for (var j = 0; j < numClasses; j++) {\n      // Check if the class name is currently defined\n      var index = elementClasses.indexOf(classNames[j]); // Add if stateValue === true or we are toggling and there is no value\n\n      if (state >= 0 && index < 0) {\n        elementClasses.push(classNames[j]);\n      } else if (state <= 0 && index >= 0) {\n        // Otherwise remove but only if the item exists\n        elementClasses.splice(index, 1);\n      }\n    }\n\n    this[i].attribs.class = elementClasses.join(' ');\n  }\n\n  return this;\n};\n/**\n * Checks the current list of elements and returns `true` if _any_ of the\n * elements match the selector. If using an element or Cheerio selection,\n * returns `true` if _any_ of the elements match. If using a predicate function,\n * the function is executed in the context of the selected element, so `this`\n * refers to the current element.\n *\n * @param {string | Function | Cheerio | Node} selector - Selector for the selection.\n * @returns {boolean} Whether or not the selector matches an element of the instance.\n * @see {@link https://api.jquery.com/is/}\n */\n\n\nexports.is = function (selector) {\n  if (selector) {\n    return this.filter(selector).length > 0;\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/Users/lhwn/Documents/workspace/react_career_prj/node_modules/cheerio/lib/api/attributes.js"],"names":["text","require","utils","isTag","domEach","hasOwn","Object","prototype","hasOwnProperty","camelCase","cssCase","rspace","dataAttrPrefix","primitives","null","true","false","rboolean","rbrace","getAttr","elem","name","attribs","call","test","children","type","setAttr","el","value","removeAttribute","exports","attr","undefined","i","keys","forEach","objName","objValue","arguments","length","getProp","setProp","prop","property","css","p","toUpperCase","clone","wrap","parent","html","j","__","key","val","setData","data","assign","readData","readAll","domNames","jsNames","filter","attrName","slice","map","_domName","idx","domName","jsName","String","Number","JSON","parse","e","querying","element","option","find","removeAttr","toArray","splitNames","names","trim","split","attrNames","_","hasClass","className","some","clazz","indexOf","end","addClass","classNames","numElements","join","setClass","appendClass","removeClass","classes","numClasses","removeAll","class","elClasses","changed","index","splice","toggleClass","stateVal","state","elementClasses","push","is","selector"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */\n\nvar text = require('../static').text;\nvar utils = require('../utils');\nvar isTag = utils.isTag;\nvar domEach = utils.domEach;\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar camelCase = utils.camelCase;\nvar cssCase = utils.cssCase;\nvar rspace = /\\s+/;\nvar dataAttrPrefix = 'data-';\n// Lookup table for coercing string data-* attributes to their corresponding\n// JavaScript primitives\nvar primitives = {\n  null: null,\n  true: true,\n  false: false,\n};\n// Attributes that are booleans\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;\n// Matches strings that look like JSON objects or arrays\nvar rbrace = /^(?:{[\\w\\W]*}|\\[[\\w\\W]*])$/;\n\n/**\n * Gets a node's attribute. For boolean attributes, it will return the value's\n * name should it be set.\n *\n * Also supports getting the `value` of several form elements.\n *\n * @private\n * @param {Element} elem - Elenent to get the attribute of.\n * @param {string} name - Name of the attribute.\n * @returns {object | string | undefined} The attribute's value.\n */\nfunction getAttr(elem, name) {\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.attribs) {\n    elem.attribs = {};\n  }\n\n  // Return the entire attribs object if no attribute specified\n  if (!name) {\n    return elem.attribs;\n  }\n\n  if (hasOwn.call(elem.attribs, name)) {\n    // Get the (decoded) attribute\n    return rboolean.test(name) ? name : elem.attribs[name];\n  }\n\n  // Mimic the DOM and return text content as value for `option's`\n  if (elem.name === 'option' && name === 'value') {\n    return text(elem.children);\n  }\n\n  // Mimic DOM with default value for radios/checkboxes\n  if (\n    elem.name === 'input' &&\n    (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') &&\n    name === 'value'\n  ) {\n    return 'on';\n  }\n}\n\n/**\n * Sets the value of an attribute. The attribute will be deleted if the value is `null`.\n *\n * @private\n * @param {Element} el - The element to set the attribute on.\n * @param {string} name - The attribute's name.\n * @param {string | null} value - The attribute's value.\n */\nfunction setAttr(el, name, value) {\n  if (value === null) {\n    removeAttribute(el, name);\n  } else {\n    el.attribs[name] = value + '';\n  }\n}\n\n/**\n * Method for getting and setting attributes. Gets the attribute value for only\n * the first element in the matched set. If you set an attribute's value to\n * `null`, you remove that attribute. You may also pass a `map` and `function`\n * like jQuery.\n *\n * @example\n *   $('ul').attr('id');\n *   //=> fruits\n *\n *   $('.apple').attr('id', 'favorite').html();\n *   //=> <li class=\"apple\" id=\"favorite\">Apple</li>\n *\n * @param {string} name - Name of the attribute.\n * @param {string | Function} [value] - If specified sets the value of the attribute.\n * @returns {string | Cheerio} If `value` is specified the instance itself,\n *   otherwise the attribute's value.\n * @see {@link https://api.jquery.com/attr/}\n */\nexports.attr = function (name, value) {\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (i, el) {\n        setAttr(el, name, value.call(el, i, el.attribs[name]));\n      });\n    }\n    return domEach(this, function (i, el) {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (objName) {\n          var objValue = name[objName];\n          setAttr(el, objName, objValue);\n        });\n      } else {\n        setAttr(el, name, value);\n      }\n    });\n  }\n\n  return arguments.length > 1 ? this : getAttr(this[0], name);\n};\n\n/**\n * Gets a node's prop.\n *\n * @private\n * @param {Node} el - Elenent to get the prop of.\n * @param {string} name - Name of the prop.\n * @returns {string | undefined} The prop's value.\n */\nfunction getProp(el, name) {\n  if (!el || !isTag(el)) return;\n\n  return name in el\n    ? el[name]\n    : rboolean.test(name)\n    ? getAttr(el, name) !== undefined\n    : getAttr(el, name);\n}\n\n/**\n * Sets the value of a prop.\n *\n * @private\n * @param {Element} el - The element to set the prop on.\n * @param {string} name - The prop's name.\n * @param {string | null} value - The prop's value.\n */\nfunction setProp(el, name, value) {\n  if (name in el) {\n    el[name] = value;\n  } else {\n    setAttr(el, name, rboolean.test(name) ? (value ? '' : null) : value);\n  }\n}\n\n/**\n * Method for getting and setting properties. Gets the property value for only\n * the first element in the matched set.\n *\n * @example\n *   $('input[type=\"checkbox\"]').prop('checked');\n *   //=> false\n *\n *   $('input[type=\"checkbox\"]').prop('checked', true).val();\n *   //=> ok\n *\n * @param {string} name - Name of the property.\n * @param {any} [value] - If specified set the property to this.\n * @returns {string | Cheerio} If `value` is specified the instance itself,\n *   otherwise the prop's value.\n * @see {@link https://api.jquery.com/prop/}\n */\nexports.prop = function (name, value) {\n  if (typeof name === 'string' && value === undefined) {\n    switch (name) {\n      case 'style': {\n        var property = this.css();\n        var keys = Object.keys(property);\n        keys.forEach(function (p, i) {\n          property[i] = p;\n        });\n\n        property.length = keys.length;\n\n        return property;\n      }\n      case 'tagName':\n      case 'nodeName':\n        return this[0].name.toUpperCase();\n\n      case 'outerHTML':\n        return this.clone().wrap('<container />').parent().html();\n\n      case 'innerHTML':\n        return this.html();\n\n      default:\n        return getProp(this[0], name);\n    }\n  }\n\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (j, el) {\n        setProp(el, name, value.call(el, j, getProp(el, name)));\n      });\n    }\n\n    return domEach(this, function (__, el) {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (key) {\n          var val = name[key];\n          setProp(el, key, val);\n        });\n      } else {\n        setProp(el, name, value);\n      }\n    });\n  }\n};\n\n/**\n * Sets the value of a data attribute.\n *\n * @private\n * @param {Element} el - The element to set the data attribute on.\n * @param {string | object} name - The data attribute's name.\n * @param {string | null} value - The data attribute's value.\n */\nfunction setData(el, name, value) {\n  if (!el.data) {\n    el.data = {};\n  }\n\n  if (typeof name === 'object') Object.assign(el.data, name);\n  else if (typeof name === 'string' && value !== undefined) {\n    el.data[name] = value;\n  }\n}\n\n/**\n * Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n * and (if present) cache the value in the node's internal data store. If no\n * attribute name is specified, read *all* HTML5 `data-*` attributes in this manner.\n *\n * @private\n * @param {Element} el - Elenent to get the data attribute of.\n * @param {string} [name] - Name of the data attribute.\n * @returns {any} The data attribute's value, or a map with all of the data attribute.\n */\nfunction readData(el, name) {\n  var readAll = arguments.length === 1;\n  var domNames;\n  var jsNames;\n  var value;\n\n  if (readAll) {\n    domNames = Object.keys(el.attribs).filter(function (attrName) {\n      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;\n    });\n    jsNames = domNames.map(function (_domName) {\n      return camelCase(_domName.slice(dataAttrPrefix.length));\n    });\n  } else {\n    domNames = [dataAttrPrefix + cssCase(name)];\n    jsNames = [name];\n  }\n\n  for (var idx = 0; idx < domNames.length; ++idx) {\n    var domName = domNames[idx];\n    var jsName = jsNames[idx];\n    if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {\n      value = el.attribs[domName];\n\n      if (hasOwn.call(primitives, value)) {\n        value = primitives[value];\n      } else if (value === String(Number(value))) {\n        value = Number(value);\n      } else if (rbrace.test(value)) {\n        try {\n          value = JSON.parse(value);\n        } catch (e) {\n          /* ignore */\n        }\n      }\n\n      el.data[jsName] = value;\n    }\n  }\n\n  return readAll ? el.data : value;\n}\n\n/**\n * Method for getting and setting data attributes. Gets or sets the data\n * attribute value for only the first element in the matched set.\n *\n * @example\n *   $('<div data-apple-color=\"red\"></div>').data();\n *   //=> { appleColor: 'red' }\n *\n *   $('<div data-apple-color=\"red\"></div>').data('apple-color');\n *   //=> 'red'\n *\n *   const apple = $('.apple').data('kind', 'mac');\n *   apple.data('kind');\n *   //=> 'mac'\n *\n * @param {string} name - Name of the attribute.\n * @param {any} [value] - If specified new value.\n * @returns {string | Cheerio | undefined} If `value` is specified the instance\n *   itself, otherwise the data attribute's value.\n * @see {@link https://api.jquery.com/data/}\n */\nexports.data = function (name, value) {\n  var elem = this[0];\n\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.data) {\n    elem.data = {};\n  }\n\n  // Return the entire data object if no data specified\n  if (!name) {\n    return readData(elem);\n  }\n\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    domEach(this, function (i, el) {\n      setData(el, name, value);\n    });\n    return this;\n  }\n  if (hasOwn.call(elem.data, name)) {\n    return elem.data[name];\n  }\n\n  return readData(elem, name);\n};\n\n/**\n * Method for getting and setting the value of input, select, and textarea.\n * Note: Support for `map`, and `function` has not been added yet.\n *\n * @example\n *   $('input[type=\"text\"]').val();\n *   //=> input_text\n *\n *   $('input[type=\"text\"]').val('test').html();\n *   //=> <input type=\"text\" value=\"test\"/>\n *\n * @param {string | string[]} [value] - If specified new value.\n * @returns {string | Cheerio | undefined} If a new `value` is specified the\n *   instance itself, otherwise the value.\n * @see {@link https://api.jquery.com/val/}\n */\nexports.val = function (value) {\n  var querying = arguments.length === 0;\n  var element = this[0];\n\n  if (!element) return;\n\n  switch (element.name) {\n    case 'textarea':\n      return this.text(value);\n    case 'select': {\n      var option = this.find('option:selected');\n      if (!option) return;\n      if (!querying) {\n        if (this.attr('multiple') == null && typeof value === 'object') {\n          return this;\n        }\n        if (typeof value !== 'object') {\n          value = [value];\n        }\n        this.find('option').removeAttr('selected');\n        for (var i = 0; i < value.length; i++) {\n          this.find('option[value=\"' + value[i] + '\"]').attr('selected', '');\n        }\n        return this;\n      }\n\n      return this.attr('multiple')\n        ? option.toArray().map(function (el) {\n            return getAttr(el, 'value');\n          })\n        : option.attr('value');\n    }\n    case 'input':\n    case 'option':\n      return querying ? this.attr('value') : this.attr('value', value);\n  }\n};\n\n/**\n * Remove an attribute.\n *\n * @private\n * @param {Element} elem - Node to remove attribute from.\n * @param {string} name - Name of the attribute to remove.\n */\nfunction removeAttribute(elem, name) {\n  if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;\n\n  delete elem.attribs[name];\n}\n\n/**\n * Splits a space-separated list of names to individual names.\n *\n * @param {string} names - Names to split.\n * @returns {string[]} - Split names.\n */\nfunction splitNames(names) {\n  return names ? names.trim().split(rspace) : [];\n}\n\n/**\n * Method for removing attributes by `name`.\n *\n * @example\n *   $('.pear').removeAttr('class').html();\n *   //=> <li>Pear</li>\n *\n *   $('.apple').attr('id', 'favorite');\n *   $('.apple').removeAttr('id class').html();\n *   //=> <li>Apple</li>\n *\n * @param {string} name - Name of the attribute.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/removeAttr/}\n */\nexports.removeAttr = function (name) {\n  var attrNames = splitNames(name);\n\n  for (var i = 0; i < attrNames.length; i++) {\n    domEach(this, function (_, elem) {\n      removeAttribute(elem, attrNames[i]);\n    });\n  }\n\n  return this;\n};\n\n/**\n * Check to see if *any* of the matched elements have the given `className`.\n *\n * @example\n *   $('.pear').hasClass('pear');\n *   //=> true\n *\n *   $('apple').hasClass('fruit');\n *   //=> false\n *\n *   $('li').hasClass('pear');\n *   //=> true\n *\n * @param {string} className - Name of the class.\n * @returns {boolean} Indicates if an element has the given `className`.\n * @see {@link https://api.jquery.com/hasClass/}\n */\nexports.hasClass = function (className) {\n  return this.toArray().some(function (elem) {\n    var clazz = elem.attribs && elem.attribs['class'];\n    var idx = -1;\n\n    if (clazz && className.length) {\n      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {\n        var end = idx + className.length;\n\n        if (\n          (idx === 0 || rspace.test(clazz[idx - 1])) &&\n          (end === clazz.length || rspace.test(clazz[end]))\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  });\n};\n\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function` like jQuery.\n *\n * @example\n *   $('.pear').addClass('fruit').html();\n *   //=> <li class=\"pear fruit\">Pear</li>\n *\n *   $('.apple').addClass('fruit red').html();\n *   //=> <li class=\"apple fruit red\">Apple</li>\n *\n * @param {string | Function} value - Name of new class.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/addClass/}\n */\nexports.addClass = function (value) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      var className = el.attribs['class'] || '';\n      exports.addClass.call([el], value.call(el, i, className));\n    });\n  }\n\n  // Return if no value or not a string or function\n  if (!value || typeof value !== 'string') return this;\n\n  var classNames = value.split(rspace);\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue;\n\n    // If we don't already have classes\n    var className = getAttr(this[i], 'class');\n\n    if (!className) {\n      setAttr(this[i], 'class', classNames.join(' ').trim());\n    } else {\n      var setClass = ' ' + className + ' ';\n\n      // Check if class already exists\n      for (var j = 0; j < classNames.length; j++) {\n        var appendClass = classNames[j] + ' ';\n        if (setClass.indexOf(' ' + appendClass) < 0) setClass += appendClass;\n      }\n\n      setAttr(this[i], 'class', setClass.trim());\n    }\n  }\n\n  return this;\n};\n\n/**\n * Removes one or more space-separated classes from the selected elements. If no\n * `className` is defined, all classes will be removed. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *   $('.pear').removeClass('pear').html();\n *   //=> <li class=\"\">Pear</li>\n *\n *   $('.apple').addClass('red').removeClass().html();\n *   //=> <li class=\"\">Apple</li>\n *\n * @param {string | Function} value - Name of the class.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/removeClass/}\n */\nexports.removeClass = function (value) {\n  // Handle if value is a function\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.removeClass.call(\n        [el],\n        value.call(el, i, el.attribs['class'] || '')\n      );\n    });\n  }\n\n  var classes = splitNames(value);\n  var numClasses = classes.length;\n  var removeAll = arguments.length === 0;\n\n  return domEach(this, function (_, el) {\n    if (!isTag(el)) return;\n\n    if (removeAll) {\n      // Short circuit the remove all case as this is the nice one\n      el.attribs.class = '';\n    } else {\n      var elClasses = splitNames(el.attribs.class);\n      var changed = false;\n\n      for (var j = 0; j < numClasses; j++) {\n        var index = elClasses.indexOf(classes[j]);\n\n        if (index >= 0) {\n          elClasses.splice(index, 1);\n          changed = true;\n\n          // We have to do another pass to ensure that there are not duplicate\n          // classes listed\n          j--;\n        }\n      }\n      if (changed) {\n        el.attribs.class = elClasses.join(' ');\n      }\n    }\n  });\n};\n\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *   $('.apple.green').toggleClass('fruit green red').html();\n *   //=> <li class=\"apple fruit red\">Apple</li>\n *\n *   $('.apple.green').toggleClass('fruit green red', true).html();\n *   //=> <li class=\"apple green fruit red\">Apple</li>\n *\n * @param {string | Function} value - Name of the class. Can also be a function.\n * @param {boolean} [stateVal] - If specified the state of the class.\n * @returns {Cheerio} The instance itself.\n * @see {@link https://api.jquery.com/toggleClass/}\n */\nexports.toggleClass = function (value, stateVal) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.toggleClass.call(\n        [el],\n        value.call(el, i, el.attribs['class'] || '', stateVal),\n        stateVal\n      );\n    });\n  }\n\n  // Return if no value or not a string or function\n  if (!value || typeof value !== 'string') return this;\n\n  var classNames = value.split(rspace);\n  var numClasses = classNames.length;\n  var state = typeof stateVal === 'boolean' ? (stateVal ? 1 : -1) : 0;\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue;\n\n    var elementClasses = splitNames(this[i].attribs.class);\n\n    // Check if class already exists\n    for (var j = 0; j < numClasses; j++) {\n      // Check if the class name is currently defined\n      var index = elementClasses.indexOf(classNames[j]);\n\n      // Add if stateValue === true or we are toggling and there is no value\n      if (state >= 0 && index < 0) {\n        elementClasses.push(classNames[j]);\n      } else if (state <= 0 && index >= 0) {\n        // Otherwise remove but only if the item exists\n        elementClasses.splice(index, 1);\n      }\n    }\n\n    this[i].attribs.class = elementClasses.join(' ');\n  }\n\n  return this;\n};\n\n/**\n * Checks the current list of elements and returns `true` if _any_ of the\n * elements match the selector. If using an element or Cheerio selection,\n * returns `true` if _any_ of the elements match. If using a predicate function,\n * the function is executed in the context of the selected element, so `this`\n * refers to the current element.\n *\n * @param {string | Function | Cheerio | Node} selector - Selector for the selection.\n * @returns {boolean} Whether or not the selector matches an element of the instance.\n * @see {@link https://api.jquery.com/is/}\n */\nexports.is = function (selector) {\n  if (selector) {\n    return this.filter(selector).length > 0;\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"script"}