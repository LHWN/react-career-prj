{"ast":null,"code":"'use strict';\n/*\n  Module Dependencies\n*/\n\nvar DomUtils = require('htmlparser2').DomUtils;\n\nvar parseWithHtmlparser2 = require('./parsers/htmlparser2').parse;\n\nvar parseWithParse5 = require('./parsers/parse5').parse;\n\nvar Document = require('domhandler').Document;\n/*\n  Parser\n*/\n\n\nexports = module.exports = function parse(content, options, isDocument) {\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n    content = content.toString();\n  }\n\n  if (typeof content === 'string') {\n    return options.xmlMode || options._useHtmlParser2 ? parseWithHtmlparser2(content, options) : parseWithParse5(content, options, isDocument);\n  }\n\n  if (typeof content === 'object' && content != null && content.type === 'root') {\n    // If `content` is already a root, just return it\n    return content;\n  } // Add conent to new root element\n\n\n  var root = new Document(content); // Update the DOM using the root\n\n  exports.update(content, root);\n  return root;\n};\n/**\n * Update the dom structure, for one changed layer.\n *\n * @param {Node[] | Node} arr - The new children.\n * @param {NodeWithChildren} parent - The new parent.\n * @returns {Node} The parent node.\n */\n\n\nexports.update = function (arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr]; // Update parent\n\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  } // Update neighbors\n\n\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i]; // Cleanly remove existing nodes from their previous structures.\n\n    if (node.parent && node.parent.children !== arr) {\n      DomUtils.removeElement(node);\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    node.parent = parent;\n  }\n\n  return parent;\n};","map":{"version":3,"sources":["/Users/lhwn/Documents/workspace/react_career_prj/node_modules/cheerio/lib/parse.js"],"names":["DomUtils","require","parseWithHtmlparser2","parse","parseWithParse5","Document","exports","module","content","options","isDocument","Buffer","isBuffer","toString","xmlMode","_useHtmlParser2","type","root","update","arr","parent","Array","isArray","children","i","length","node","removeElement","prev","next"],"mappings":"AAAA;AACA;AACA;AACA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,QAAtC;;AACA,IAAIE,oBAAoB,GAAGD,OAAO,CAAC,uBAAD,CAAP,CAAiCE,KAA5D;;AACA,IAAIC,eAAe,GAAGH,OAAO,CAAC,kBAAD,CAAP,CAA4BE,KAAlD;;AACA,IAAIE,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAAP,CAAsBI,QAArC;AAEA;AACA;AACA;;;AACAC,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiB,SAASH,KAAT,CAAeK,OAAf,EAAwBC,OAAxB,EAAiCC,UAAjC,EAA6C;AACtE,MAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,QAAP,CAAgBJ,OAAhB,CAArC,EAA+D;AAC7DA,IAAAA,OAAO,GAAGA,OAAO,CAACK,QAAR,EAAV;AACD;;AAED,MAAI,OAAOL,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAOC,OAAO,CAACK,OAAR,IAAmBL,OAAO,CAACM,eAA3B,GACHb,oBAAoB,CAACM,OAAD,EAAUC,OAAV,CADjB,GAEHL,eAAe,CAACI,OAAD,EAAUC,OAAV,EAAmBC,UAAnB,CAFnB;AAGD;;AAED,MACE,OAAOF,OAAP,KAAmB,QAAnB,IACAA,OAAO,IAAI,IADX,IAEAA,OAAO,CAACQ,IAAR,KAAiB,MAHnB,EAIE;AACA;AACA,WAAOR,OAAP;AACD,GAlBqE,CAoBtE;;;AACA,MAAIS,IAAI,GAAG,IAAIZ,QAAJ,CAAaG,OAAb,CAAX,CArBsE,CAuBtE;;AACAF,EAAAA,OAAO,CAACY,MAAR,CAAeV,OAAf,EAAwBS,IAAxB;AAEA,SAAOA,IAAP;AACD,CA3BD;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAX,OAAO,CAACY,MAAR,GAAiB,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AACtC;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAL,EAAyBA,GAAG,GAAG,CAACA,GAAD,CAAN,CAFa,CAItC;;AACA,MAAIC,MAAJ,EAAY;AACVA,IAAAA,MAAM,CAACG,QAAP,GAAkBJ,GAAlB;AACD,GAFD,MAEO;AACLC,IAAAA,MAAM,GAAG,IAAT;AACD,GATqC,CAWtC;;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACM,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,QAAIE,IAAI,GAAGP,GAAG,CAACK,CAAD,CAAd,CADmC,CAGnC;;AACA,QAAIE,IAAI,CAACN,MAAL,IAAeM,IAAI,CAACN,MAAL,CAAYG,QAAZ,KAAyBJ,GAA5C,EAAiD;AAC/CnB,MAAAA,QAAQ,CAAC2B,aAAT,CAAuBD,IAAvB;AACD;;AAED,QAAIN,MAAJ,EAAY;AACVM,MAAAA,IAAI,CAACE,IAAL,GAAYT,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,IAAc,IAA1B;AACAE,MAAAA,IAAI,CAACG,IAAL,GAAYV,GAAG,CAACK,CAAC,GAAG,CAAL,CAAH,IAAc,IAA1B;AACD,KAHD,MAGO;AACLE,MAAAA,IAAI,CAACE,IAAL,GAAYF,IAAI,CAACG,IAAL,GAAY,IAAxB;AACD;;AAEDH,IAAAA,IAAI,CAACN,MAAL,GAAcA,MAAd;AACD;;AAED,SAAOA,MAAP;AACD,CA/BD","sourcesContent":["'use strict';\n/*\n  Module Dependencies\n*/\nvar DomUtils = require('htmlparser2').DomUtils;\nvar parseWithHtmlparser2 = require('./parsers/htmlparser2').parse;\nvar parseWithParse5 = require('./parsers/parse5').parse;\nvar Document = require('domhandler').Document;\n\n/*\n  Parser\n*/\nexports = module.exports = function parse(content, options, isDocument) {\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n    content = content.toString();\n  }\n\n  if (typeof content === 'string') {\n    return options.xmlMode || options._useHtmlParser2\n      ? parseWithHtmlparser2(content, options)\n      : parseWithParse5(content, options, isDocument);\n  }\n\n  if (\n    typeof content === 'object' &&\n    content != null &&\n    content.type === 'root'\n  ) {\n    // If `content` is already a root, just return it\n    return content;\n  }\n\n  // Add conent to new root element\n  var root = new Document(content);\n\n  // Update the DOM using the root\n  exports.update(content, root);\n\n  return root;\n};\n\n/**\n * Update the dom structure, for one changed layer.\n *\n * @param {Node[] | Node} arr - The new children.\n * @param {NodeWithChildren} parent - The new parent.\n * @returns {Node} The parent node.\n */\nexports.update = function (arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    if (node.parent && node.parent.children !== arr) {\n      DomUtils.removeElement(node);\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    node.parent = parent;\n  }\n\n  return parent;\n};\n"]},"metadata":{},"sourceType":"script"}