{"ast":null,"code":"'use strict';\n/**\n * @module cheerio/static\n * @ignore\n */\n\nvar defaultOptions = require('./options').default;\n\nvar flattenOptions = require('./options').flatten;\n\nvar select = require('cheerio-select').select;\n\nvar renderWithParse5 = require('./parsers/parse5').render;\n\nvar renderWithHtmlparser2 = require('./parsers/htmlparser2').render;\n/**\n * Helper function to render a DOM.\n *\n * @param {Cheerio} that - Cheerio instance to render.\n * @param {Node[] | undefined} dom - The DOM to render. Defaults to `that`'s root.\n * @param {object} options - Options for rendering.\n * @returns {string} The rendered document.\n */\n\n\nfunction render(that, dom, options) {\n  if (!dom) {\n    if (that._root && that._root.children) {\n      dom = that._root.children;\n    } else {\n      return '';\n    }\n  } else if (typeof dom === 'string') {\n    dom = select(dom, that._root, options);\n  }\n\n  return options.xmlMode || options._useHtmlParser2 ? renderWithHtmlparser2(dom, options) : renderWithParse5(dom);\n}\n/**\n * Renders the document.\n *\n * @param {string | Cheerio | Node | object} [dom] - Element to render.\n * @param {object} [options] - Options for the renderer.\n * @returns {string} The rendered document.\n */\n\n\nexports.html = function (dom, options) {\n  // be flexible about parameters, sometimes we call html(),\n  // with options as only parameter\n  // check dom argument for dom element specific properties\n  // assume there is no 'length' or 'type' properties in the options object\n  if (Object.prototype.toString.call(dom) === '[object Object]' && !options && !('length' in dom) && !('type' in dom)) {\n    options = dom;\n    dom = undefined;\n  } // Sometimes `$.html()` is used without preloading html,\n  // so fallback non-existing options to the default ones.\n\n\n  options = Object.assign({}, defaultOptions, this ? this._options : {}, flattenOptions(options || {}));\n  return render(this, dom, options);\n};\n/**\n * Render the document as XML.\n *\n * @param {string | Cheerio | Node} [dom] - Element to render.\n * @returns {string} THe rendered document.\n */\n\n\nexports.xml = function (dom) {\n  var options = Object.assign({}, this._options, {\n    xmlMode: true\n  });\n  return render(this, dom, options);\n};\n/**\n * Render the document as text.\n *\n * @param {Cheerio | Node[]} [elems] - Elements to render.\n * @returns {string} The rendered document.\n */\n\n\nexports.text = function (elems) {\n  if (!elems) {\n    elems = this.root();\n  }\n\n  var ret = '';\n  var len = elems.length;\n\n  for (var i = 0; i < len; i++) {\n    var elem = elems[i];\n    if (elem.type === 'text') ret += elem.data;else if (elem.children && elem.type !== 'comment' && elem.tagName !== 'script' && elem.tagName !== 'style') {\n      ret += exports.text(elem.children);\n    }\n  }\n\n  return ret;\n};\n/**\n * Parses a string into an array of DOM nodes. The `context` argument has no\n * meaning for Cheerio, but it is maintained for API compatibility with jQuery.\n *\n * @param {string} data - Markup that will be parsed.\n * @param {any | boolean} [context] - Will be ignored. If it is a boolean it\n *   will be used as the value of `keepScripts`.\n * @param {boolean} [keepScripts] - If false all scripts will be removed.\n * @returns {Node[]} The parsed DOM.\n * @alias Cheerio.parseHTML\n * @see {@link https://api.jquery.com/jQuery.parseHTML/}\n */\n\n\nexports.parseHTML = function (data, context, keepScripts) {\n  if (!data || typeof data !== 'string') {\n    return null;\n  }\n\n  if (typeof context === 'boolean') {\n    keepScripts = context;\n  }\n\n  var parsed = this.load(data, defaultOptions, false);\n\n  if (!keepScripts) {\n    parsed('script').remove();\n  } // The `children` array is used by Cheerio internally to group elements that\n  // share the same parents. When nodes created through `parseHTML` are\n  // inserted into previously-existing DOM structures, they will be removed\n  // from the `children` array. The results of `parseHTML` should remain\n  // constant across these operations, so a shallow copy should be returned.\n\n\n  return parsed.root()[0].children.slice();\n};\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @example\n *   $.root().append('<ul id=\"vegetables\"></ul>').html();\n *   //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n *\n * @returns {Cheerio} Cheerio instance wrapping the root node.\n * @alias Cheerio.root\n */\n\n\nexports.root = function () {\n  return this(this._root);\n};\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param {Node} container - Potential parent node.\n * @param {Node} contained - Potential child node.\n * @returns {boolean} Indicates if the nodes contain one another.\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains/}\n */\n\n\nexports.contains = function (container, contained) {\n  // According to the jQuery API, an element does not \"contain\" itself\n  if (contained === container) {\n    return false;\n  } // Step up the descendants, stopping when the root element is reached\n  // (signaled by `.parent` returning a reference to the same object)\n\n\n  while (contained && contained !== contained.parent) {\n    contained = contained.parent;\n\n    if (contained === container) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * $.merge().\n *\n * @param {Array | Cheerio} arr1 - First array.\n * @param {Array | Cheerio} arr2 - Second array.\n * @returns {Array | Cheerio} `arr1`, with elements of `arr2` inserted.\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge/}\n */\n\n\nexports.merge = function (arr1, arr2) {\n  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n    return;\n  }\n\n  var newLength = arr1.length;\n  var len = +arr2.length;\n\n  for (var i = 0; i < len; i++) {\n    arr1[newLength++] = arr2[i];\n  }\n\n  arr1.length = newLength;\n  return arr1;\n};\n/**\n * @param {any} item - Item to check.\n * @returns {boolean} Indicates if the item is array-like.\n */\n\n\nfunction isArrayLike(item) {\n  if (Array.isArray(item)) {\n    return true;\n  }\n\n  if (typeof item !== 'object' || !Object.prototype.hasOwnProperty.call(item, 'length') || typeof item.length !== 'number' || item.length < 0) {\n    return false;\n  }\n\n  for (var i = 0; i < item.length; i++) {\n    if (!(i in item)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/lhwn/Documents/workspace/react_career_prj/node_modules/cheerio/lib/static.js"],"names":["defaultOptions","require","default","flattenOptions","flatten","select","renderWithParse5","render","renderWithHtmlparser2","that","dom","options","_root","children","xmlMode","_useHtmlParser2","exports","html","Object","prototype","toString","call","undefined","assign","_options","xml","text","elems","root","ret","len","length","i","elem","type","data","tagName","parseHTML","context","keepScripts","parsed","load","remove","slice","contains","container","contained","parent","merge","arr1","arr2","isArrayLike","newLength","item","Array","isArray","hasOwnProperty"],"mappings":"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","sourcesContent":["'use strict';\n/**\n * @module cheerio/static\n * @ignore\n */\nvar defaultOptions = require('./options').default;\nvar flattenOptions = require('./options').flatten;\nvar select = require('cheerio-select').select;\nvar renderWithParse5 = require('./parsers/parse5').render;\nvar renderWithHtmlparser2 = require('./parsers/htmlparser2').render;\n\n/**\n * Helper function to render a DOM.\n *\n * @param {Cheerio} that - Cheerio instance to render.\n * @param {Node[] | undefined} dom - The DOM to render. Defaults to `that`'s root.\n * @param {object} options - Options for rendering.\n * @returns {string} The rendered document.\n */\nfunction render(that, dom, options) {\n  if (!dom) {\n    if (that._root && that._root.children) {\n      dom = that._root.children;\n    } else {\n      return '';\n    }\n  } else if (typeof dom === 'string') {\n    dom = select(dom, that._root, options);\n  }\n\n  return options.xmlMode || options._useHtmlParser2\n    ? renderWithHtmlparser2(dom, options)\n    : renderWithParse5(dom);\n}\n\n/**\n * Renders the document.\n *\n * @param {string | Cheerio | Node | object} [dom] - Element to render.\n * @param {object} [options] - Options for the renderer.\n * @returns {string} The rendered document.\n */\nexports.html = function (dom, options) {\n  // be flexible about parameters, sometimes we call html(),\n  // with options as only parameter\n  // check dom argument for dom element specific properties\n  // assume there is no 'length' or 'type' properties in the options object\n  if (\n    Object.prototype.toString.call(dom) === '[object Object]' &&\n    !options &&\n    !('length' in dom) &&\n    !('type' in dom)\n  ) {\n    options = dom;\n    dom = undefined;\n  }\n\n  // Sometimes `$.html()` is used without preloading html,\n  // so fallback non-existing options to the default ones.\n  options = Object.assign(\n    {},\n    defaultOptions,\n    this ? this._options : {},\n    flattenOptions(options || {})\n  );\n\n  return render(this, dom, options);\n};\n\n/**\n * Render the document as XML.\n *\n * @param {string | Cheerio | Node} [dom] - Element to render.\n * @returns {string} THe rendered document.\n */\nexports.xml = function (dom) {\n  var options = Object.assign({}, this._options, { xmlMode: true });\n\n  return render(this, dom, options);\n};\n\n/**\n * Render the document as text.\n *\n * @param {Cheerio | Node[]} [elems] - Elements to render.\n * @returns {string} The rendered document.\n */\nexports.text = function (elems) {\n  if (!elems) {\n    elems = this.root();\n  }\n\n  var ret = '';\n  var len = elems.length;\n\n  for (var i = 0; i < len; i++) {\n    var elem = elems[i];\n    if (elem.type === 'text') ret += elem.data;\n    else if (\n      elem.children &&\n      elem.type !== 'comment' &&\n      elem.tagName !== 'script' &&\n      elem.tagName !== 'style'\n    ) {\n      ret += exports.text(elem.children);\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Parses a string into an array of DOM nodes. The `context` argument has no\n * meaning for Cheerio, but it is maintained for API compatibility with jQuery.\n *\n * @param {string} data - Markup that will be parsed.\n * @param {any | boolean} [context] - Will be ignored. If it is a boolean it\n *   will be used as the value of `keepScripts`.\n * @param {boolean} [keepScripts] - If false all scripts will be removed.\n * @returns {Node[]} The parsed DOM.\n * @alias Cheerio.parseHTML\n * @see {@link https://api.jquery.com/jQuery.parseHTML/}\n */\nexports.parseHTML = function (data, context, keepScripts) {\n  if (!data || typeof data !== 'string') {\n    return null;\n  }\n\n  if (typeof context === 'boolean') {\n    keepScripts = context;\n  }\n\n  var parsed = this.load(data, defaultOptions, false);\n  if (!keepScripts) {\n    parsed('script').remove();\n  }\n\n  // The `children` array is used by Cheerio internally to group elements that\n  // share the same parents. When nodes created through `parseHTML` are\n  // inserted into previously-existing DOM structures, they will be removed\n  // from the `children` array. The results of `parseHTML` should remain\n  // constant across these operations, so a shallow copy should be returned.\n  return parsed.root()[0].children.slice();\n};\n\n/**\n * Sometimes you need to work with the top-level root element. To query it, you\n * can use `$.root()`.\n *\n * @example\n *   $.root().append('<ul id=\"vegetables\"></ul>').html();\n *   //=> <ul id=\"fruits\">...</ul><ul id=\"vegetables\"></ul>\n *\n * @returns {Cheerio} Cheerio instance wrapping the root node.\n * @alias Cheerio.root\n */\nexports.root = function () {\n  return this(this._root);\n};\n\n/**\n * Checks to see if the `contained` DOM element is a descendant of the\n * `container` DOM element.\n *\n * @param {Node} container - Potential parent node.\n * @param {Node} contained - Potential child node.\n * @returns {boolean} Indicates if the nodes contain one another.\n * @alias Cheerio.contains\n * @see {@link https://api.jquery.com/jQuery.contains/}\n */\nexports.contains = function (container, contained) {\n  // According to the jQuery API, an element does not \"contain\" itself\n  if (contained === container) {\n    return false;\n  }\n\n  // Step up the descendants, stopping when the root element is reached\n  // (signaled by `.parent` returning a reference to the same object)\n  while (contained && contained !== contained.parent) {\n    contained = contained.parent;\n    if (contained === container) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * $.merge().\n *\n * @param {Array | Cheerio} arr1 - First array.\n * @param {Array | Cheerio} arr2 - Second array.\n * @returns {Array | Cheerio} `arr1`, with elements of `arr2` inserted.\n * @alias Cheerio.merge\n * @see {@link https://api.jquery.com/jQuery.merge/}\n */\nexports.merge = function (arr1, arr2) {\n  if (!isArrayLike(arr1) || !isArrayLike(arr2)) {\n    return;\n  }\n  var newLength = arr1.length;\n  var len = +arr2.length;\n\n  for (var i = 0; i < len; i++) {\n    arr1[newLength++] = arr2[i];\n  }\n  arr1.length = newLength;\n  return arr1;\n};\n\n/**\n * @param {any} item - Item to check.\n * @returns {boolean} Indicates if the item is array-like.\n */\nfunction isArrayLike(item) {\n  if (Array.isArray(item)) {\n    return true;\n  }\n\n  if (\n    typeof item !== 'object' ||\n    !Object.prototype.hasOwnProperty.call(item, 'length') ||\n    typeof item.length !== 'number' ||\n    item.length < 0\n  ) {\n    return false;\n  }\n\n  for (var i = 0; i < item.length; i++) {\n    if (!(i in item)) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"script"}