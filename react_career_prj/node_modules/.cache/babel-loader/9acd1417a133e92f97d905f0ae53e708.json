{"ast":null,"code":"'use strict';\n/**\n * @module cheerio/load\n * @ignore\n */\n\nvar defaultOptions = require('./options').default;\n\nvar flattenOptions = require('./options').flatten;\n\nvar staticMethods = require('./static');\n\nvar Cheerio = require('./cheerio');\n\nvar parse = require('./parse');\n/**\n * Create a querying function, bound to a document created from the provided\n * markup. Note that similar to web browser contexts, this operation may\n * introduce `<html>`, `<head>`, and `<body>` elements; set `isDocument` to\n * `false` to switch to fragment mode and disable this.\n *\n * See the README section titled \"Loading\" for additional usage information.\n *\n * @param {string} content - Markup to be loaded.\n * @param {object} [options] - Options for the created instance.\n * @param {boolean} [isDocument] - Allows parser to be switched to fragment mode.\n * @returns {Cheerio} - The loaded document.\n */\n\n\nexports.load = function (content, options, isDocument) {\n  if (content === null || content === undefined) {\n    throw new Error('cheerio.load() expects a string');\n  }\n\n  options = Object.assign({}, defaultOptions, flattenOptions(options));\n  if (typeof isDocument === 'undefined') isDocument = true;\n  var root = parse(content, options, isDocument);\n\n  function initialize(selector, context, r, opts) {\n    if (!(this instanceof initialize)) {\n      return new initialize(selector, context, r, opts);\n    }\n\n    opts = Object.assign({}, options, opts);\n    return Cheerio.call(this, selector, context, r || root, opts);\n  } // Ensure that selections created by the \"loaded\" `initialize` function are\n  // true Cheerio instances.\n\n\n  initialize.prototype = Object.create(Cheerio.prototype);\n  initialize.prototype.constructor = initialize; // Mimic jQuery's prototype alias for plugin authors.\n\n  initialize.fn = initialize.prototype; // Keep a reference to the top-level scope so we can chain methods that implicitly\n  // resolve selectors; e.g. $(\"<span>\").(\".bar\"), which otherwise loses ._root\n\n  initialize.prototype._originalRoot = root; // Add in the static methods\n\n  Object.assign(initialize, staticMethods, exports); // Add in the root\n\n  initialize._root = root; // store options\n\n  initialize._options = options;\n  return initialize;\n};","map":{"version":3,"sources":["/Users/lhwn/Documents/workspace/react_career_prj/node_modules/cheerio/lib/load.js"],"names":["defaultOptions","require","default","flattenOptions","flatten","staticMethods","Cheerio","parse","exports","load","content","options","isDocument","undefined","Error","Object","assign","root","initialize","selector","context","r","opts","call","prototype","create","constructor","fn","_originalRoot","_root","_options"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA,IAAIA,cAAc,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBC,OAA1C;;AACA,IAAIC,cAAc,GAAGF,OAAO,CAAC,WAAD,CAAP,CAAqBG,OAA1C;;AACA,IAAIC,aAAa,GAAGJ,OAAO,CAAC,UAAD,CAA3B;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,SAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAO,OAAO,CAACC,IAAR,GAAe,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,UAA5B,EAAwC;AACrD,MAAIF,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKG,SAApC,EAA+C;AAC7C,UAAM,IAAIC,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAEDH,EAAAA,OAAO,GAAGI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBhB,cAAlB,EAAkCG,cAAc,CAACQ,OAAD,CAAhD,CAAV;AAEA,MAAI,OAAOC,UAAP,KAAsB,WAA1B,EAAuCA,UAAU,GAAG,IAAb;AAEvC,MAAIK,IAAI,GAAGV,KAAK,CAACG,OAAD,EAAUC,OAAV,EAAmBC,UAAnB,CAAhB;;AAEA,WAASM,UAAT,CAAoBC,QAApB,EAA8BC,OAA9B,EAAuCC,CAAvC,EAA0CC,IAA1C,EAAgD;AAC9C,QAAI,EAAE,gBAAgBJ,UAAlB,CAAJ,EAAmC;AACjC,aAAO,IAAIA,UAAJ,CAAeC,QAAf,EAAyBC,OAAzB,EAAkCC,CAAlC,EAAqCC,IAArC,CAAP;AACD;;AACDA,IAAAA,IAAI,GAAGP,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,OAAlB,EAA2BW,IAA3B,CAAP;AACA,WAAOhB,OAAO,CAACiB,IAAR,CAAa,IAAb,EAAmBJ,QAAnB,EAA6BC,OAA7B,EAAsCC,CAAC,IAAIJ,IAA3C,EAAiDK,IAAjD,CAAP;AACD,GAjBoD,CAmBrD;AACA;;;AACAJ,EAAAA,UAAU,CAACM,SAAX,GAAuBT,MAAM,CAACU,MAAP,CAAcnB,OAAO,CAACkB,SAAtB,CAAvB;AACAN,EAAAA,UAAU,CAACM,SAAX,CAAqBE,WAArB,GAAmCR,UAAnC,CAtBqD,CAwBrD;;AACAA,EAAAA,UAAU,CAACS,EAAX,GAAgBT,UAAU,CAACM,SAA3B,CAzBqD,CA2BrD;AACA;;AACAN,EAAAA,UAAU,CAACM,SAAX,CAAqBI,aAArB,GAAqCX,IAArC,CA7BqD,CA+BrD;;AACAF,EAAAA,MAAM,CAACC,MAAP,CAAcE,UAAd,EAA0Bb,aAA1B,EAAyCG,OAAzC,EAhCqD,CAkCrD;;AACAU,EAAAA,UAAU,CAACW,KAAX,GAAmBZ,IAAnB,CAnCqD,CAoCrD;;AACAC,EAAAA,UAAU,CAACY,QAAX,GAAsBnB,OAAtB;AAEA,SAAOO,UAAP;AACD,CAxCD","sourcesContent":["'use strict';\n/**\n * @module cheerio/load\n * @ignore\n */\nvar defaultOptions = require('./options').default;\nvar flattenOptions = require('./options').flatten;\nvar staticMethods = require('./static');\nvar Cheerio = require('./cheerio');\nvar parse = require('./parse');\n\n/**\n * Create a querying function, bound to a document created from the provided\n * markup. Note that similar to web browser contexts, this operation may\n * introduce `<html>`, `<head>`, and `<body>` elements; set `isDocument` to\n * `false` to switch to fragment mode and disable this.\n *\n * See the README section titled \"Loading\" for additional usage information.\n *\n * @param {string} content - Markup to be loaded.\n * @param {object} [options] - Options for the created instance.\n * @param {boolean} [isDocument] - Allows parser to be switched to fragment mode.\n * @returns {Cheerio} - The loaded document.\n */\nexports.load = function (content, options, isDocument) {\n  if (content === null || content === undefined) {\n    throw new Error('cheerio.load() expects a string');\n  }\n\n  options = Object.assign({}, defaultOptions, flattenOptions(options));\n\n  if (typeof isDocument === 'undefined') isDocument = true;\n\n  var root = parse(content, options, isDocument);\n\n  function initialize(selector, context, r, opts) {\n    if (!(this instanceof initialize)) {\n      return new initialize(selector, context, r, opts);\n    }\n    opts = Object.assign({}, options, opts);\n    return Cheerio.call(this, selector, context, r || root, opts);\n  }\n\n  // Ensure that selections created by the \"loaded\" `initialize` function are\n  // true Cheerio instances.\n  initialize.prototype = Object.create(Cheerio.prototype);\n  initialize.prototype.constructor = initialize;\n\n  // Mimic jQuery's prototype alias for plugin authors.\n  initialize.fn = initialize.prototype;\n\n  // Keep a reference to the top-level scope so we can chain methods that implicitly\n  // resolve selectors; e.g. $(\"<span>\").(\".bar\"), which otherwise loses ._root\n  initialize.prototype._originalRoot = root;\n\n  // Add in the static methods\n  Object.assign(initialize, staticMethods, exports);\n\n  // Add in the root\n  initialize._root = root;\n  // store options\n  initialize._options = options;\n\n  return initialize;\n};\n"]},"metadata":{},"sourceType":"script"}