{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport { pender } from 'redux-pender';\nimport * as AuthAPI from '../../lib/api/auth';\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\n\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\n// const CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; // 이메일 중복 확인\n// const CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; // 아이디 중복 확인\n// const LOCAL_REGISTER = 'auth/LOCAL_REGISTER'; // 이메일 가입\n// const LOCAL_LOGIN = 'auth/LOCAL_LOGIN'; // 이메일 로그인\n// const LOGOUT = 'auth/LOGOUT'; // 로그아웃\n// const SET_ERROR = 'auth/SET_ERROR'; // 오류 설정\n\nexport const changeInput = createAction(CHANGE_INPUT);\nexport const initializeForm = createAction(INITIALIZE_FORM); // export const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists);\n// export const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists);\n// export const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister);\n// export const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin);\n// export const logout = createAction(LOGOUT, AuthAPI.logout);\n// export const setError = createAction(SET_ERROR);\n\nconst initialState = Map({\n  register: Map({\n    form: Map({\n      email: '',\n      username: '',\n      password: '',\n      passwordConfirm: ''\n    }) // exists: Map({\n    //   email: false,\n    //   username: false\n    // }),\n    // error: null\n\n  }),\n  login: Map({\n    form: Map({\n      email: '',\n      password: ''\n    }) // error: null\n\n  }) // result: Map({})\n\n}); // Reducer\n\nexport default handleActions({\n  [CHANGE_INPUT]: (state, action) => {\n    const {\n      form,\n      name,\n      value\n    } = action.payload;\n    console.log('reducer/changeInput');\n    return state.setIn([form, 'form', name], value);\n  },\n  [INITIALIZE_FORM]: (state, action) => {\n    const initialForm = initialState.get(action.payload);\n    return state.set(action.payload, initialForm);\n  }\n}, initialState);","map":{"version":3,"sources":["/Users/lhwn/Documents/workspace/react_career_prj/src/redux/modules/auth.js"],"names":["createAction","handleActions","Map","pender","AuthAPI","CHANGE_INPUT","INITIALIZE_FORM","changeInput","initializeForm","initialState","register","form","email","username","password","passwordConfirm","login","state","action","name","value","payload","console","log","setIn","initialForm","get","set"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AAEA,MAAMC,YAAY,GAAG,mBAArB,C,CAA0C;;AAC1C,MAAMC,eAAe,GAAG,sBAAxB,C,CAAgD;AAChD;AACA;AACA;AACA;AAEA;AAEA;;AAEA,OAAO,MAAMC,WAAW,GAAGP,YAAY,CAACK,YAAD,CAAhC;AACP,OAAO,MAAMG,cAAc,GAAGR,YAAY,CAACM,eAAD,CAAnC,C,CAEP;AACA;AAEA;AACA;AAEA;AAEA;;AAEA,MAAMG,YAAY,GAAGP,GAAG,CAAC;AACvBQ,EAAAA,QAAQ,EAAER,GAAG,CAAC;AACZS,IAAAA,IAAI,EAAET,GAAG,CAAC;AACRU,MAAAA,KAAK,EAAE,EADC;AAERC,MAAAA,QAAQ,EAAE,EAFF;AAGRC,MAAAA,QAAQ,EAAE,EAHF;AAIRC,MAAAA,eAAe,EAAE;AAJT,KAAD,CADG,CAOZ;AACA;AACA;AACA;AACA;;AAXY,GAAD,CADU;AAcvBC,EAAAA,KAAK,EAAEd,GAAG,CAAC;AACTS,IAAAA,IAAI,EAAET,GAAG,CAAC;AACRU,MAAAA,KAAK,EAAE,EADC;AAERE,MAAAA,QAAQ,EAAE;AAFF,KAAD,CADA,CAKT;;AALS,GAAD,CAda,CAqBvB;;AArBuB,CAAD,CAAxB,C,CAwBA;;AACA,eAAeb,aAAa,CAC1B;AACE,GAACI,YAAD,GAAgB,CAACY,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAM;AAAEP,MAAAA,IAAF;AAAQQ,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAwBF,MAAM,CAACG,OAArC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,WAAON,KAAK,CAACO,KAAN,CAAY,CAACb,IAAD,EAAO,MAAP,EAAeQ,IAAf,CAAZ,EAAkCC,KAAlC,CAAP;AACD,GALH;AAME,GAACd,eAAD,GAAmB,CAACW,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAMO,WAAW,GAAGhB,YAAY,CAACiB,GAAb,CAAiBR,MAAM,CAACG,OAAxB,CAApB;AACA,WAAOJ,KAAK,CAACU,GAAN,CAAUT,MAAM,CAACG,OAAjB,EAA0BI,WAA1B,CAAP;AACD;AATH,CAD0B,EAY1BhB,YAZ0B,CAA5B","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport { pender } from 'redux-pender';\nimport * as AuthAPI from '../../lib/api/auth';\n\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\n// const CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; // 이메일 중복 확인\n// const CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; // 아이디 중복 확인\n// const LOCAL_REGISTER = 'auth/LOCAL_REGISTER'; // 이메일 가입\n// const LOCAL_LOGIN = 'auth/LOCAL_LOGIN'; // 이메일 로그인\n\n// const LOGOUT = 'auth/LOGOUT'; // 로그아웃\n\n// const SET_ERROR = 'auth/SET_ERROR'; // 오류 설정\n\nexport const changeInput = createAction(CHANGE_INPUT);\nexport const initializeForm = createAction(INITIALIZE_FORM);\n\n// export const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists);\n// export const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists);\n\n// export const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister);\n// export const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin);\n\n// export const logout = createAction(LOGOUT, AuthAPI.logout);\n\n// export const setError = createAction(SET_ERROR);\n\nconst initialState = Map({\n  register: Map({\n    form: Map({\n      email: '',\n      username: '',\n      password: '',\n      passwordConfirm: ''\n    })\n    // exists: Map({\n    //   email: false,\n    //   username: false\n    // }),\n    // error: null\n  }),\n  login: Map({\n    form: Map({\n      email: '',\n      password: ''\n    })\n    // error: null\n  })\n  // result: Map({})\n});\n\n// Reducer\nexport default handleActions(\n  {\n    [CHANGE_INPUT]: (state, action) => {\n      const { form, name, value } = action.payload;\n      console.log('reducer/changeInput');\n      return state.setIn([form, 'form', name], value);\n    },\n    [INITIALIZE_FORM]: (state, action) => {\n      const initialForm = initialState.get(action.payload);\n      return state.set(action.payload, initialForm);\n    }\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}