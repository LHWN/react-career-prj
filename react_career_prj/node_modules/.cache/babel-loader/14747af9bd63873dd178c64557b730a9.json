{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport { pender } from 'redux-pender';\nimport * as AuthAPI from '../../lib/api/auth';\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\n\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\n\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; // 이메일 중복 확인\n\nconst CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; // 아이디 중복 확인\n\nconst LOCAL_REGISTER = 'auth/LOCAL_REGISTER'; // 이메일 가입\n\nconst LOCAL_LOGIN = 'auth/LOCAL_LOGIN'; // 이메일 로그인\n\nconst LOGOUT = 'auth/LOGOUT'; // 로그아웃\n\nconst SET_ERROR = 'auth/SET_ERROR'; // 오류 설정\n\nexport const changeInput = createAction(CHANGE_INPUT);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists);\nexport const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists);\nexport const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister);\nexport const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin);\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\nexport const setError = createAction(SET_ERROR);\nconst initialState = Map({\n  register: Map({\n    form: Map({\n      email: '',\n      username: '',\n      password: '',\n      passwordConfirm: ''\n    }),\n    exists: Map({\n      email: false,\n      username: false\n    }),\n    error: null\n  }),\n  login: Map({\n    form: Map({\n      email: '',\n      password: ''\n    })\n  })\n}); // Reducer\n\nexport default handleActions({\n  [CHANGE_INPUT]: (state, action) => {\n    console.log('redux, changeInput');\n    const {\n      form,\n      name,\n      value\n    } = action.payload;\n    return state.setIn([form, 'form', name], value);\n  },\n  [INITIALIZE_FORM]: (state, action) => {\n    const initialForm = initialState.get(action.payload);\n    return state.set(action.payload, initialForm);\n  },\n  ...pender({\n    type: CHECK_EMAIL_EXISTS,\n    onSuccess: (state, action) => state.setIn(['register', 'exists', 'email'], action.payload.data.exists)\n  }),\n  ...pender({\n    type: CHECK_USERNAME_EXISTS,\n    onSuccess: (state, action) => state.setIn(['register', 'exists', 'username'], action.payload.data.exists)\n  }),\n  [SET_ERROR]: (state, action) => {\n    const {\n      form,\n      message\n    } = action.payload;\n    return state.setIn([form, 'error'], message);\n  }\n}, initialState);","map":{"version":3,"sources":["/Users/lhwn/Documents/workspace/react_career_prj/src/redux/modules/auth.js"],"names":["createAction","handleActions","Map","pender","AuthAPI","CHANGE_INPUT","INITIALIZE_FORM","CHECK_EMAIL_EXISTS","CHECK_USERNAME_EXISTS","LOCAL_REGISTER","LOCAL_LOGIN","LOGOUT","SET_ERROR","changeInput","initializeForm","checkEmailExists","checkUsernameExists","localRegister","localLogin","logout","setError","initialState","register","form","email","username","password","passwordConfirm","exists","error","login","state","action","console","log","name","value","payload","setIn","initialForm","get","set","type","onSuccess","data","message"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport { pender } from 'redux-pender';\nimport * as AuthAPI from '../../lib/api/auth';\n\nconst CHANGE_INPUT = 'auth/CHANGE_INPUT'; // input 값 변경\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM'; // form 초기화\nconst CHECK_EMAIL_EXISTS = 'auth/CHECK_EMAIL_EXISTS'; // 이메일 중복 확인\nconst CHECK_USERNAME_EXISTS = 'auth/CHECK_USERNAME_EXISTS'; // 아이디 중복 확인\nconst LOCAL_REGISTER = 'auth/LOCAL_REGISTER'; // 이메일 가입\nconst LOCAL_LOGIN = 'auth/LOCAL_LOGIN'; // 이메일 로그인\n\nconst LOGOUT = 'auth/LOGOUT'; // 로그아웃\n\nconst SET_ERROR = 'auth/SET_ERROR'; // 오류 설정\n\nexport const changeInput = createAction(CHANGE_INPUT);\nexport const initializeForm = createAction(INITIALIZE_FORM);\n\nexport const checkEmailExists = createAction(CHECK_EMAIL_EXISTS, AuthAPI.checkEmailExists);\nexport const checkUsernameExists = createAction(CHECK_USERNAME_EXISTS, AuthAPI.checkUsernameExists);\n\nexport const localRegister = createAction(LOCAL_REGISTER, AuthAPI.localRegister);\nexport const localLogin = createAction(LOCAL_LOGIN, AuthAPI.localLogin);\n\nexport const logout = createAction(LOGOUT, AuthAPI.logout);\n\nexport const setError = createAction(SET_ERROR);\n\nconst initialState = Map({\n  register: Map({\n    form: Map({\n      email: '',\n      username: '',\n      password: '',\n      passwordConfirm: ''\n    }),\n    exists: Map({\n      email: false,\n      username: false\n    }),\n    error: null\n  }),\n  login: Map({\n    form: Map({\n      email: '',\n      password: ''\n    })\n  })\n});\n\n// Reducer\nexport default handleActions(\n  {\n    [CHANGE_INPUT]: (state, action) => {\n      console.log('redux, changeInput');\n      const { form, name, value } = action.payload;\n      return state.setIn([form, 'form', name], value);\n    },\n    [INITIALIZE_FORM]: (state, action) => {\n      const initialForm = initialState.get(action.payload);\n      return state.set(action.payload, initialForm);\n    },\n    ...pender({\n      type: CHECK_EMAIL_EXISTS,\n      onSuccess: (state, action) => state.setIn(['register', 'exists', 'email'], action.payload.data.exists)\n    }),\n    ...pender({\n      type: CHECK_USERNAME_EXISTS,\n      onSuccess: (state, action) => state.setIn(['register', 'exists', 'username'], action.payload.data.exists)\n    }),\n    [SET_ERROR]: (state, action) => {\n      const { form, message } = action.payload;\n      return state.setIn([form, 'error'], message);\n    }\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}